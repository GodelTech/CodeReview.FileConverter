[
  {
    "id": "Microsoft.NetCore.Analyzers",
    "version": "3.3.2",
    "description": "Microsoft recommended .NetCore API usage rules implemented as analyzers using the .NET Compiler Platform (Roslyn). This package is included as a part of Microsoft.CodeAnalysis.FxCopAnalyzers NuGet package and does not need to be installed separately.",
    "diagnostics": [
      {
        "id": "CA1303",
        "title": "Do not pass literals as localized parameters",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Globalization",
        "description": "A method passes a string literal as a parameter to a constructor or method in the .NET Framework class library and that string should be localizable. To fix a violation of this rule, replace the string literal with a string retrieved through an instance of the ResourceManager class.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1303",
        "messageFormat": "Method '{0}' passes a literal string as parameter '{1}' of a call to '{2}'. Retrieve the following string(s) from a resource table instead: \"{3}\".",
        "customTags": [
          "PortedFromFxCop",
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1304",
        "title": "Specify CultureInfo",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Globalization",
        "description": "A method or constructor calls a member that has an overload that accepts a System.Globalization.CultureInfo parameter, and the method or constructor does not call the overload that takes the CultureInfo parameter. When a CultureInfo or System.IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales. If the result will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1304",
        "messageFormat": "The behavior of '{0}' could vary based on the current user's locale settings. Replace this call in '{1}' with a call to '{2}'.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1305",
        "title": "Specify IFormatProvider",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Globalization",
        "description": "A method or constructor calls one or more members that have overloads that accept a System.IFormatProvider parameter, and the method or constructor does not call the overload that takes the IFormatProvider parameter. When a System.Globalization.CultureInfo or IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales. If the result will be based on the input from/output displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider'. Otherwise, if the result will be stored and accessed by software, such as when it is loaded from disk/database and when it is persisted to disk/database, specify 'CultureInfo.InvariantCulture'.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1305",
        "messageFormat": "The behavior of '{0}' could vary based on the current user's locale settings. Replace this call in '{1}' with a call to '{2}'.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1305",
        "title": "Specify IFormatProvider",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Globalization",
        "description": "A method or constructor calls one or more members that have overloads that accept a System.IFormatProvider parameter, and the method or constructor does not call the overload that takes the IFormatProvider parameter. When a System.Globalization.CultureInfo or IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales. If the result will be based on the input from/output displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider'. Otherwise, if the result will be stored and accessed by software, such as when it is loaded from disk/database and when it is persisted to disk/database, specify 'CultureInfo.InvariantCulture'.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1305",
        "messageFormat": "The behavior of '{0}' could vary based on the current user's locale settings. Replace this call in '{1}' with a call to '{2}'.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1305",
        "title": "Specify IFormatProvider",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Globalization",
        "description": "A method or constructor calls one or more members that have overloads that accept a System.IFormatProvider parameter, and the method or constructor does not call the overload that takes the IFormatProvider parameter. When a System.Globalization.CultureInfo or IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales. If the result will be based on the input from/output displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider'. Otherwise, if the result will be stored and accessed by software, such as when it is loaded from disk/database and when it is persisted to disk/database, specify 'CultureInfo.InvariantCulture'.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1305",
        "messageFormat": "'{0}' passes '{1}' as the 'IFormatProvider' parameter to '{2}'. This property returns a culture that is inappropriate for formatting methods.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1305",
        "title": "Specify IFormatProvider",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Globalization",
        "description": "A method or constructor calls one or more members that have overloads that accept a System.IFormatProvider parameter, and the method or constructor does not call the overload that takes the IFormatProvider parameter. When a System.Globalization.CultureInfo or IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales. If the result will be based on the input from/output displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider'. Otherwise, if the result will be stored and accessed by software, such as when it is loaded from disk/database and when it is persisted to disk/database, specify 'CultureInfo.InvariantCulture'.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1305",
        "messageFormat": "'{0}' passes '{1}' as the 'IFormatProvider' parameter to '{2}'. This property returns a culture that is inappropriate for formatting methods.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1307",
        "title": "Specify StringComparison for clarity",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Globalization",
        "description": "A string comparison operation uses a method overload that does not set a StringComparison parameter. It is recommended to use the overload with StringComparison parameter for clarity of intent. If the result will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1307",
        "messageFormat": "'{0}' has a method overload that takes a 'StringComparison' parameter. Replace this call in '{1}' with a call to '{2}' for clarity of intent.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1308",
        "title": "Normalize strings to uppercase",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Globalization",
        "description": "Strings should be normalized to uppercase. A small group of characters cannot make a round trip when they are converted to lowercase. To make a round trip means to convert the characters from one locale to another locale that represents character data differently, and then to accurately retrieve the original characters from the converted characters.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1308",
        "messageFormat": "In method '{0}', replace the call to '{1}' with '{2}'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1309",
        "title": "Use ordinal string comparison",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Globalization",
        "description": "A string comparison operation that is nonlinguistic does not set the StringComparison parameter to either Ordinal or OrdinalIgnoreCase. By explicitly setting the parameter to either StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase, your code often gains speed, becomes more correct, and becomes more reliable.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1309",
        "messageFormat": "Use ordinal string comparison",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1310",
        "title": "Specify StringComparison for correctness",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Globalization",
        "description": "A string comparison operation uses a method overload that does not set a StringComparison parameter, hence its behavior could vary based on the current user's locale settings. It is strongly recommended to use the overload with StringComparison parameter for correctness and clarity of intent. If the result will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1310",
        "messageFormat": "The behavior of '{0}' could vary based on the current user's locale settings. Replace this call in '{1}' with a call to '{2}'.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1401",
        "title": "P/Invokes should not be visible",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Interoperability",
        "description": "A public or protected method in a public type has the System.Runtime.InteropServices.DllImportAttribute attribute (also implemented by the Declare keyword in Visual Basic). Such methods should not be exposed.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1401",
        "messageFormat": "P/Invoke method '{0}' should not be visible",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1416",
        "title": "Validate platform compatibility",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Interoperability",
        "description": "Using platform dependent API on a component makes the code no longer work across all platforms.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1416",
        "messageFormat": "This call site is reachable on: {2}. '{0}' is only supported on: {1}.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1416",
        "title": "Validate platform compatibility",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Interoperability",
        "description": "Using platform dependent API on a component makes the code no longer work across all platforms.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1416",
        "messageFormat": "This call site is unreachable on: {2}. '{0}' is only supported on: {1}.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1416",
        "title": "Validate platform compatibility",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Interoperability",
        "description": "Using platform dependent API on a component makes the code no longer work across all platforms.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1416",
        "messageFormat": "This call site is reachable on all platforms. '{0}' is only supported on: {1}.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1416",
        "title": "Validate platform compatibility",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Interoperability",
        "description": "Using platform dependent API on a component makes the code no longer work across all platforms.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1416",
        "messageFormat": "This call site is reachable on all platforms. '{0}' is supported on: {1}.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1416",
        "title": "Validate platform compatibility",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Interoperability",
        "description": "Using platform dependent API on a component makes the code no longer work across all platforms.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1416",
        "messageFormat": "This call site is reachable on: {2}. '{0}' is supported on: {1}.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1416",
        "title": "Validate platform compatibility",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Interoperability",
        "description": "Using platform dependent API on a component makes the code no longer work across all platforms.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1416",
        "messageFormat": "This call site is reachable on all platforms. '{0}' is unsupported on: {1}.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1416",
        "title": "Validate platform compatibility",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Interoperability",
        "description": "Using platform dependent API on a component makes the code no longer work across all platforms.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1416",
        "messageFormat": "This call site is reachable on: {2}. '{0}' is unsupported on: {1}.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1417",
        "title": "Do not use 'OutAttribute' on string parameters for P/Invokes",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Interoperability",
        "description": "String parameters passed by value with the 'OutAttribute' can destabilize the runtime if the string is an interned string.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1417",
        "messageFormat": "Do not use the 'OutAttribute' for string parameter '{0}' which is passed by value. If marshalling of modified data back to the caller is required, use the 'out' keyword to pass the string by reference instead.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1810",
        "title": "Initialize reference type static fields inline",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "A reference type declares an explicit static constructor. To fix a violation of this rule, initialize all static data when it is declared and remove the static constructor.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1810",
        "messageFormat": "Initialize all static fields in '{0}' when those fields are declared and remove the explicit static constructor",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1813",
        "title": "Avoid unsealed attributes",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Performance",
        "description": "The .NET Framework class library provides methods for retrieving custom attributes. By default, these methods search the attribute inheritance hierarchy. Sealing the attribute eliminates the search through the inheritance hierarchy and can improve performance.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1813",
        "messageFormat": "Avoid unsealed attributes",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1816",
        "title": "Dispose methods should call SuppressFinalize",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "A method that is an implementation of Dispose does not call GC.SuppressFinalize; or a method that is not an implementation of Dispose calls GC.SuppressFinalize; or a method calls GC.SuppressFinalize and passes something other than this (Me in Visual Basic).",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1816",
        "messageFormat": "Change {0} to call {1}. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1816",
        "title": "Dispose methods should call SuppressFinalize",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "A method that is an implementation of Dispose does not call GC.SuppressFinalize; or a method that is not an implementation of Dispose calls GC.SuppressFinalize; or a method calls GC.SuppressFinalize and passes something other than this (Me in Visual Basic).",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1816",
        "messageFormat": "Change {0} to call {1}. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1816",
        "title": "Dispose methods should call SuppressFinalize",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "A method that is an implementation of Dispose does not call GC.SuppressFinalize; or a method that is not an implementation of Dispose calls GC.SuppressFinalize; or a method calls GC.SuppressFinalize and passes something other than this (Me in Visual Basic).",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1816",
        "messageFormat": "{0} calls {1} on something other than itself. Change the call site to pass 'this' ('Me' in Visual Basic) instead.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1816",
        "title": "Dispose methods should call SuppressFinalize",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "A method that is an implementation of Dispose does not call GC.SuppressFinalize; or a method that is not an implementation of Dispose calls GC.SuppressFinalize; or a method calls GC.SuppressFinalize and passes something other than this (Me in Visual Basic).",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1816",
        "messageFormat": "{0} calls {1}, a method that is typically only called within an implementation of 'IDisposable.Dispose'. Refer to the IDisposable pattern for more information.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1820",
        "title": "Test for empty strings using string length",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "Comparing strings by using the String.Length property or the String.IsNullOrEmpty method is significantly faster than using Equals.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1820",
        "messageFormat": "Test for empty strings using 'string.Length' property or 'string.IsNullOrEmpty' method instead of an Equality check",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1824",
        "title": "Mark assemblies with NeutralResourcesLanguageAttribute",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "The NeutralResourcesLanguage attribute informs the ResourceManager of the language that was used to display the resources of a neutral culture for an assembly. This improves lookup performance for the first resource that you load and can reduce your working set.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1824",
        "messageFormat": "Mark assemblies with NeutralResourcesLanguageAttribute",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA1825",
        "title": "Avoid zero-length array allocations",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1825",
        "messageFormat": "Avoid unnecessary zero-length array allocations.  Use {0} instead.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1826",
        "title": "Do not use Enumerable methods on indexable collections",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "This collection is directly indexable. Going through LINQ here causes unnecessary allocations and CPU work.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1826",
        "messageFormat": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1827",
        "title": "Do not use Count() or LongCount() when Any() can be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "For non-empty collections, Count() and LongCount() enumerate the entire sequence, while Any() stops at the first item or the first item that satisfies a condition.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1827",
        "messageFormat": "{0}() is used where Any() could be used instead to improve performance",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1828",
        "title": "Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "For non-empty collections, CountAsync() and LongCountAsync() enumerate the entire sequence, while AnyAsync() stops at the first item or the first item that satisfies a condition.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1828",
        "messageFormat": "{0}() is used where AnyAsync() could be used instead to improve performance",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1829",
        "title": "Use Length/Count property instead of Count() when available",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "Enumerable.Count() potentially enumerates the sequence while a Length/Count property is a direct access.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1829",
        "messageFormat": "Use the \"{0}\" property instead of Enumerable.Count()",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1830",
        "title": "Prefer strongly-typed Append and Insert method overloads on StringBuilder",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "StringBuilder.Append and StringBuilder.Insert provide overloads for multiple types beyond System.String.  When possible, prefer the strongly-typed overloads over using ToString() and the string-based overload.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1830",
        "messageFormat": "Remove the ToString call in order to use a strongly-typed StringBuilder overload",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1831",
        "title": "Use AsSpan or AsMemory instead of Range-based indexers when appropriate",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "The Range-based indexer on string values produces a copy of requested portion of the string. This copy is usually unnecessary when it is implicitly used as a ReadOnlySpan or ReadOnlyMemory value. Use the AsSpan method to avoid the unnecessary copy.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1831",
        "messageFormat": "Use '{0}' instead of the '{1}'-based indexer on '{2}' to avoid creating unnecessary data copies",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1832",
        "title": "Use AsSpan or AsMemory instead of Range-based indexers when appropriate",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "The Range-based indexer on array values produces a copy of requested portion of the array. This copy is usually unnecessary when it is implicitly used as a ReadOnlySpan or ReadOnlyMemory value. Use the AsSpan method to avoid the unnecessary copy.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1832",
        "messageFormat": "Use '{0}' instead of the '{1}'-based indexer on '{2}' to avoid creating unnecessary data copies",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1833",
        "title": "Use AsSpan or AsMemory instead of Range-based indexers when appropriate",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "The Range-based indexer on array values produces a copy of requested portion of the array. This copy is often unwanted when it is implicitly used as a Span or Memory value. Use the AsSpan method to avoid the copy.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1833",
        "messageFormat": "Use '{0}' instead of the '{1}'-based indexer on '{2}' to avoid creating unnecessary data copies",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1834",
        "title": "Consider using 'StringBuilder.Append(char)' when applicable",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "'StringBuilder.Append(char)' is more efficient than 'StringBuilder.Append(string)' when the string is a single character. When calling 'Append' with a constant, prefer using a constant char rather than a constant string containing one character.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1834",
        "messageFormat": "Use 'StringBuilder.Append(char)' instead of 'StringBuilder.Append(string)' when the input is a constant unit string",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1835",
        "title": "Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "'Stream' has a 'ReadAsync' overload that takes a 'Memory<Byte>' as the first argument, and a 'WriteAsync' overload that takes a 'ReadOnlyMemory<Byte>' as the first argument. Prefer calling the memory based overloads, which are more efficient.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1835",
        "messageFormat": "Change the '{0}' method call to use the '{1}' overload",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1835",
        "title": "Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "'Stream' has a 'ReadAsync' overload that takes a 'Memory<Byte>' as the first argument, and a 'WriteAsync' overload that takes a 'ReadOnlyMemory<Byte>' as the first argument. Prefer calling the memory based overloads, which are more efficient.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1835",
        "messageFormat": "Change the '{0}' method call to use the '{1}' overload",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1836",
        "title": "Prefer IsEmpty over Count",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "For determining whether the object contains or not any items, prefer using 'IsEmpty' property rather than retrieving the number of items from the 'Count' property and comparing it to 0 or 1.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1836",
        "messageFormat": "Prefer 'IsEmpty' over 'Count' to determine whether the object contains or not any items",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1837",
        "title": "Use 'Environment.ProcessId'",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "'Environment.ProcessId' is simpler and faster than 'Process.GetCurrentProcess().Id'.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1837",
        "messageFormat": "Use 'Environment.ProcessId' instead of 'Process.GetCurrentProcess().Id'",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1838",
        "title": "Avoid 'StringBuilder' parameters for P/Invokes",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Performance",
        "description": "Marshalling of 'StringBuilder' always creates a native buffer copy, resulting in multiple allocations for one marshalling operation.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1838",
        "messageFormat": "Avoid 'StringBuilder' parameters for P/Invokes. Consider using a character buffer instead.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2000",
        "title": "Dispose objects before losing scope",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2000",
        "messageFormat": "Call System.IDisposable.Dispose on object created by '{0}' before all references to it are out of scope",
        "customTags": [
          "PortedFromFxCop",
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2000",
        "title": "Dispose objects before losing scope",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2000",
        "messageFormat": "Use recommended dispose pattern to ensure that object created by '{0}' is disposed on all paths. If possible, wrap the creation within a 'using' statement or a 'using' declaration. Otherwise, use a try-finally pattern, with a dedicated local variable declared before the try region and an unconditional Dispose invocation on non-null value in the 'finally' region, say 'x?.Dispose()'. If the object is explicitly disposed within the try region or the dispose ownership is transfered to another object or method, assign 'null' to the local variable just after such an operation to prevent double dispose in 'finally'.",
        "customTags": [
          "PortedFromFxCop",
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2000",
        "title": "Dispose objects before losing scope",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2000",
        "messageFormat": "Object created by '{0}' is not disposed along all exception paths. Call System.IDisposable.Dispose on the object before all references to it are out of scope.",
        "customTags": [
          "PortedFromFxCop",
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2000",
        "title": "Dispose objects before losing scope",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2000",
        "messageFormat": "Use recommended dispose pattern to ensure that object created by '{0}' is disposed on all exception paths. If possible, wrap the creation within a 'using' statement or a 'using' declaration. Otherwise, use a try-finally pattern, with a dedicated local variable declared before the try region and an unconditional Dispose invocation on non-null value in the 'finally' region, say 'x?.Dispose()'. If the object is explicitly disposed within the try region or the dispose ownership is transfered to another object or method, assign 'null' to the local variable just after such an operation to prevent double dispose in 'finally'.",
        "customTags": [
          "PortedFromFxCop",
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2002",
        "title": "Do not lock on objects with weak identity",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "An object is said to have a weak identity when it can be directly accessed across application domain boundaries. A thread that tries to acquire a lock on an object that has a weak identity can be blocked by a second thread in a different application domain that has a lock on the same object.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2002",
        "messageFormat": "Do not lock on objects with weak identity",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2008",
        "title": "Do not create tasks without passing a TaskScheduler",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "Do not create tasks unless you are using one of the overloads that takes a TaskScheduler. The default is to schedule on TaskScheduler.Current, which would lead to deadlocks. Either use TaskScheduler.Default to schedule on the thread pool, or explicitly pass TaskScheduler.Current to make your intentions clear.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2008",
        "messageFormat": "Do not create tasks without passing a TaskScheduler",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2009",
        "title": "Do not call ToImmutableCollection on an ImmutableCollection value",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2009",
        "messageFormat": "Do not call {0} on an {1} value",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2012",
        "title": "Use ValueTasks correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "ValueTasks returned from member invocations are intended to be directly awaited.  Attempts to consume a ValueTask multiple times or to directly access one's result before it's known to be completed may result in an exception or corruption.  Ignoring such a ValueTask is likely an indication of a functional bug and may degrade performance.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2012",
        "messageFormat": "ValueTask instances returned from method calls should be directly awaited, returned, or passed as an argument to another method call. Other usage, such as storing an instance into a local or a field, is likely an indication of a bug, as ValueTask instances must only ever be consumed once.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2012",
        "title": "Use ValueTasks correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "ValueTasks returned from member invocations are intended to be directly awaited.  Attempts to consume a ValueTask multiple times or to directly access one's result before it's known to be completed may result in an exception or corruption.  Ignoring such a ValueTask is likely an indication of a functional bug and may degrade performance.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2012",
        "messageFormat": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2012",
        "title": "Use ValueTasks correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "ValueTasks returned from member invocations are intended to be directly awaited.  Attempts to consume a ValueTask multiple times or to directly access one's result before it's known to be completed may result in an exception or corruption.  Ignoring such a ValueTask is likely an indication of a functional bug and may degrade performance.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2012",
        "messageFormat": "ValueTask instances should only be consumed once, such as via an await. Consuming the same ValueTask instance multiple times can result in exceptions and data corruption.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2012",
        "title": "Use ValueTasks correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "ValueTasks returned from member invocations are intended to be directly awaited.  Attempts to consume a ValueTask multiple times or to directly access one's result before it's known to be completed may result in an exception or corruption.  Ignoring such a ValueTask is likely an indication of a functional bug and may degrade performance.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2012",
        "messageFormat": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2013",
        "title": "Do not use ReferenceEquals with value types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "Value type typed arguments are uniquely boxed for each call to this method, therefore the result is always false.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2013",
        "messageFormat": "Do not pass an argument with value type '{0}' to 'ReferenceEquals'. Due to value boxing, this call to 'ReferenceEquals' will always return 'false'.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2013",
        "title": "Do not use ReferenceEquals with value types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "Value type typed arguments are uniquely boxed for each call to this method, therefore the result is always false.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2013",
        "messageFormat": "Do not pass an argument with value type '{0}' to the 'Equals' method on 'ReferenceEqualityComparer'. Due to value boxing, this call to 'Equals' will always return 'false'.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2014",
        "title": "Do not use stackalloc in loops",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "Stack space allocated by a stackalloc is only released at the end of the current method's invocation.  Using it in a loop can result in unbounded stack growth and eventual stack overflow conditions.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2014",
        "messageFormat": "Potential stack overflow. Move the stackalloc out of the loop.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2015",
        "title": "Do not define finalizers for types derived from MemoryManager<T>",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "Adding a finalizer to a type derived from MemoryManager<T> may permit memory to be freed while it is still in use by a Span<T>.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2015",
        "messageFormat": "Adding a finalizer to a type derived from MemoryManager<T> may permit memory to be freed while it is still in use by a Span<T>",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2016",
        "title": "Forward the 'CancellationToken' parameter to methods that take one",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "Forward the 'CancellationToken' parameter to methods that take one to ensure the operation cancellation notifications gets properly propagated, or pass in 'CancellationToken.None' explicitly to indicate intentionally not propagating the token.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2016",
        "messageFormat": "Forward the '{0}' parameter to the '{1}' method or pass in 'CancellationToken.None' explicitly to indicate intentionally not propagating the token",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2100",
        "title": "Review SQL queries for security vulnerabilities",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "SQL queries that directly use user input can be vulnerable to SQL injection attacks. Review this SQL query for potential vulnerabilities, and consider using a parameterized SQL query.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2100",
        "messageFormat": "Review if the query string passed to '{0}' in '{1}', accepts any user input",
        "customTags": [
          "PortedFromFxCop",
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2101",
        "title": "Specify marshaling for P/Invoke string arguments",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Globalization",
        "description": "A platform invoke member allows partially trusted callers, has a string parameter, and does not explicitly marshal the string. This can cause a potential security vulnerability.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2101",
        "messageFormat": "Specify marshaling for P/Invoke string arguments",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2201",
        "title": "Do not raise reserved exception types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Usage",
        "description": "An exception of type that is not sufficiently specific or reserved by the runtime should never be raised by user code. This makes the original error difficult to detect and debug. If this exception instance might be thrown, use a different exception type.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2201",
        "messageFormat": "Exception type {0} is not sufficiently specific",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2201",
        "title": "Do not raise reserved exception types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Usage",
        "description": "An exception of type that is not sufficiently specific or reserved by the runtime should never be raised by user code. This makes the original error difficult to detect and debug. If this exception instance might be thrown, use a different exception type.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2201",
        "messageFormat": "Exception type {0} is reserved by the runtime",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2207",
        "title": "Initialize value type static fields inline",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "A value type declares an explicit static constructor. To fix a violation of this rule, initialize all static data when it is declared and remove the static constructor.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2207",
        "messageFormat": "Initialize all static fields in '{0}' when those fields are declared and remove the explicit static constructor",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2208",
        "title": "Instantiate argument exceptions correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "A call is made to the default (parameterless) constructor of an exception type that is or derives from ArgumentException, or an incorrect string argument is passed to a parameterized constructor of an exception type that is or derives from ArgumentException.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2208",
        "messageFormat": "Call the {0} constructor that contains a message and/or paramName parameter",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2208",
        "title": "Instantiate argument exceptions correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "A call is made to the default (parameterless) constructor of an exception type that is or derives from ArgumentException, or an incorrect string argument is passed to a parameterized constructor of an exception type that is or derives from ArgumentException.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2208",
        "messageFormat": "Method {0} passes parameter name '{1}' as the {2} argument to a {3} constructor. Replace this argument with a descriptive message and pass the parameter name in the correct position.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2208",
        "title": "Instantiate argument exceptions correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "A call is made to the default (parameterless) constructor of an exception type that is or derives from ArgumentException, or an incorrect string argument is passed to a parameterized constructor of an exception type that is or derives from ArgumentException.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2208",
        "messageFormat": "Method {0} passes '{1}' as the {2} argument to a {3} constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2213",
        "title": "Disposable fields should be disposed",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "A type that implements System.IDisposable declares fields that are of types that also implement IDisposable. The Dispose method of the field is not called by the Dispose method of the declaring type. To fix a violation of this rule, call Dispose on fields that are of types that implement IDisposable if you are responsible for allocating and releasing the unmanaged resources held by the field.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2213",
        "messageFormat": "'{0}' contains field '{1}' that is of IDisposable type '{2}', but it is never disposed. Change the Dispose method on '{0}' to call Close or Dispose on this field.",
        "customTags": [
          "PortedFromFxCop",
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2215",
        "title": "Dispose methods should call base class dispose",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "A type that implements System.IDisposable inherits from a type that also implements IDisposable. The Dispose method of the inheriting type does not call the Dispose method of the parent type. To fix a violation of this rule, call base.Dispose in your Dispose method.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2215",
        "messageFormat": "Ensure that method '{0}' calls '{1}' in all possible control flow paths",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2216",
        "title": "Disposable types should declare finalizer",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "A type that implements System.IDisposable and has fields that suggest the use of unmanaged resources does not implement a finalizer, as described by Object.Finalize.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2216",
        "messageFormat": "Disposable types should declare finalizer",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2229",
        "title": "Implement serialization constructors",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "To fix a violation of this rule, implement the serialization constructor. For a sealed class, make the constructor private; otherwise, make it protected.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2229",
        "messageFormat": "Add a constructor to {0} with the following signature: 'protected {0}(SerializationInfo info, StreamingContext context)'.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2229",
        "title": "Implement serialization constructors",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "To fix a violation of this rule, implement the serialization constructor. For a sealed class, make the constructor private; otherwise, make it protected.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2229",
        "messageFormat": "Declare the serialization constructor of {0}, a sealed type, as private.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2229",
        "title": "Implement serialization constructors",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "To fix a violation of this rule, implement the serialization constructor. For a sealed class, make the constructor private; otherwise, make it protected.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2229",
        "messageFormat": "Declare the serialization constructor of {0}, an unsealed type, as protected.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2235",
        "title": "Mark all non-serializable fields",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "An instance field of a type that is not serializable is declared in a type that is serializable.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2235",
        "messageFormat": "Field {0} is a member of type {1} which is serializable but is of type {2} which is not serializable",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2237",
        "title": "Mark ISerializable types with serializable",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "To be recognized by the common language runtime as serializable, types must be marked by using the SerializableAttribute attribute even when the type uses a custom serialization routine through implementation of the ISerializable interface.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2237",
        "messageFormat": "Add [Serializable] to {0} as this type implements ISerializable",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2241",
        "title": "Provide correct arguments to formatting methods",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "The format argument that is passed to System.String.Format does not contain a format item that corresponds to each object argument, or vice versa.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2241",
        "messageFormat": "Provide correct arguments to formatting methods",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2242",
        "title": "Test for NaN correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "This expression tests a value against Single.Nan or Double.Nan. Use Single.IsNan(Single) or Double.IsNan(Double) to test the value.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2242",
        "messageFormat": "Test for NaN correctly",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2243",
        "title": "Attribute string literals should parse correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "The string literal parameter of an attribute does not parse correctly for a URL, a GUID, or a version.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2243",
        "messageFormat": "In the constructor of '{0}', change the value of argument '{1}', which is currently \"{2}\", to something that can be correctly parsed as '{3}'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2243",
        "title": "Attribute string literals should parse correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "The string literal parameter of an attribute does not parse correctly for a URL, a GUID, or a version.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2243",
        "messageFormat": "In the constructor of '{0}', change the value of argument '{1}', which is currently an empty string (\"\"), to something that can be correctly parsed as '{2}'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2247",
        "title": "Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "TaskCompletionSource has constructors that take TaskCreationOptions that control the underlying Task, and constructors that take object state that's stored in the task.  Accidentally passing a TaskContinuationOptions instead of a TaskCreationOptions will result in the call treating the options as state.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2247",
        "messageFormat": "Argument contains TaskContinuationsOptions enum instead of TaskCreationOptions enum",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2248",
        "title": "Provide correct 'enum' argument to 'Enum.HasFlag'",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "'Enum.HasFlag' method expects the 'enum' argument to be of the same 'enum' type as the instance on which the method is invoked and that this 'enum' is marked with 'System.FlagsAttribute'. If these are different 'enum' types, an unhandled exception will be thrown at runtime. If the 'enum' type is not marked with 'System.FlagsAttribute' the call will always return 'false' at runtime.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2248",
        "messageFormat": "The argument type, '{0}', must be the same as the enum type '{1}'",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2248",
        "title": "Provide correct 'enum' argument to 'Enum.HasFlag'",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "'Enum.HasFlag' method expects the 'enum' argument to be of the same 'enum' type as the instance on which the method is invoked and that this 'enum' is marked with 'System.FlagsAttribute'. If these are different 'enum' types, an unhandled exception will be thrown at runtime. If the 'enum' type is not marked with 'System.FlagsAttribute' the call will always return 'false' at runtime.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2248",
        "messageFormat": "This call will always returns 'false' because the enum type '{0}' is not marked with 'FlagsAttribute'",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2249",
        "title": "Consider using 'string.Contains' instead of 'string.IndexOf'",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "Calls to 'string.IndexOf' where the result is used to check for the presence/absence of a substring can be replaced by 'string.Contains'.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2249",
        "messageFormat": "Use 'string.Contains' instead of 'string.IndexOf' to improve readability",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2300",
        "title": "Do not use insecure deserializer BinaryFormatter",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "The method '{0}' is insecure when deserializing untrusted data.  If you need to instead detect BinaryFormatter deserialization without a SerializationBinder set, then disable rule CA2300, and enable rules CA2301 and CA2302.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2300",
        "messageFormat": "The method '{0}' is insecure when deserializing untrusted data.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2301",
        "title": "Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2301",
        "messageFormat": "The method '{0}' is insecure when deserializing untrusted data without a SerializationBinder to restrict the type of objects in the deserialized object graph.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA2302",
        "title": "Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2302",
        "messageFormat": "The method '{0}' is insecure when deserializing untrusted data without a SerializationBinder to restrict the type of objects in the deserialized object graph.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA2305",
        "title": "Do not use insecure deserializer LosFormatter",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2305",
        "messageFormat": "The method '{0}' is insecure when deserializing untrusted data.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2310",
        "title": "Do not use insecure deserializer NetDataContractSerializer",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "The method '{0}' is insecure when deserializing untrusted data.  If you need to instead detect NetDataContractSerializer deserialization without a SerializationBinder set, then disable rule CA2310, and enable rules CA2311 and CA2312.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2310",
        "messageFormat": "The method '{0}' is insecure when deserializing untrusted data.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2311",
        "title": "Do not deserialize without first setting NetDataContractSerializer.Binder",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2311",
        "messageFormat": "The method '{0}' is insecure when deserializing untrusted data without a SerializationBinder to restrict the type of objects in the deserialized object graph.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA2312",
        "title": "Ensure NetDataContractSerializer.Binder is set before deserializing",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2312",
        "messageFormat": "The method '{0}' is insecure when deserializing untrusted data without a SerializationBinder to restrict the type of objects in the deserialized object graph.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA2315",
        "title": "Do not use insecure deserializer ObjectStateFormatter",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2315",
        "messageFormat": "The method '{0}' is insecure when deserializing untrusted data.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2321",
        "title": "Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2321",
        "messageFormat": "The method '{0}' is insecure when deserializing untrusted data with a JavaScriptSerializer initialized with a SimpleTypeResolver. Initialize JavaScriptSerializer without a JavaScriptTypeResolver specified, or initialize with a JavaScriptTypeResolver that limits the types of objects in the deserialized object graph.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA2322",
        "title": "Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2322",
        "messageFormat": "The method '{0}' is insecure when deserializing untrusted data with a JavaScriptSerializer initialized with a SimpleTypeResolver. Ensure that the JavaScriptSerializer is initialized without a JavaScriptTypeResolver specified, or initialized with a JavaScriptTypeResolver that limits the types of objects in the deserialized object graph.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA2326",
        "title": "Do not use TypeNameHandling values other than None",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "Deserializing JSON when using a TypeNameHandling value other than None can be insecure.  If you need to instead detect Json.NET deserialization when a SerializationBinder isn't specified, then disable rule CA2326, and enable rules CA2327, CA2328, CA2329, and CA2330.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2326",
        "messageFormat": "Deserializing JSON when using a TypeNameHandling value other than None can be insecure.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2327",
        "title": "Do not use insecure JsonSerializerSettings",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2327",
        "messageFormat": "When deserializing untrusted input, allowing arbitrary types to be deserialized is insecure.  When using JsonSerializerSettings, use TypeNameHandling.None, or for values other than None, restrict deserialized types with a SerializationBinder.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA2328",
        "title": "Ensure that JsonSerializerSettings are secure",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2328",
        "messageFormat": "When deserializing untrusted input, allowing arbitrary types to be deserialized is insecure.  When using JsonSerializerSettings, ensure TypeNameHandling.None is specified, or for values other than None, ensure a SerializationBinder is specified to restrict deserialized types.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA2329",
        "title": "Do not deserialize with JsonSerializer using an insecure configuration",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2329",
        "messageFormat": "When deserializing untrusted input, allowing arbitrary types to be deserialized is insecure. When using deserializing JsonSerializer, use TypeNameHandling.None, or for values other than None, restrict deserialized types with a SerializationBinder.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA2330",
        "title": "Ensure that JsonSerializer has a secure configuration when deserializing",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2330",
        "messageFormat": "When deserializing untrusted input, allowing arbitrary types to be deserialized is insecure. When using deserializing JsonSerializer, use TypeNameHandling.None, or for values other than None, restrict deserialized types with a SerializationBinder.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA2350",
        "title": "Do not use DataTable.ReadXml() with untrusted data",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2350",
        "messageFormat": "The method '{0}' is insecure when deserializing untrusted data",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2351",
        "title": "Do not use DataSet.ReadXml() with untrusted data",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2351",
        "messageFormat": "The method '{0}' is insecure when deserializing untrusted data",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2352",
        "title": "Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2352",
        "messageFormat": "When deserializing untrusted input with an IFormatter-based serializer, deserializing a {0} object is insecure. '{1}' either is or derives from {0}.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2353",
        "title": "Unsafe DataSet or DataTable in serializable type",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2353",
        "messageFormat": "When deserializing untrusted input, deserializing a {0} object is insecure. '{1}' either is or derives from {0}",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2354",
        "title": "Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attacks",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2354",
        "messageFormat": "When deserializing untrusted input, deserializing a {0} object is insecure. '{1}' either is or derives from {0}",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2355",
        "title": "Unsafe DataSet or DataTable type found in deserializable object graph",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2355",
        "messageFormat": "When deserializing untrusted input, deserializing a {0} object is insecure. '{1}' either is or derives from {0}",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2356",
        "title": "Unsafe DataSet or DataTable type in web deserializable object graph",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2356",
        "messageFormat": "When deserializing untrusted input, deserializing a {0} object is insecure. '{1}' either is or derives from {0}",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2361",
        "title": "Ensure auto-generated class containing DataSet.ReadXml() is not used with untrusted data",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2361",
        "messageFormat": "The method '{0}' is insecure when deserializing untrusted data. Make sure that auto-generated class containing the '{0}' call is not deserialized with untrusted data.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2362",
        "title": "Unsafe DataSet or DataTable in auto-generated serializable type can be vulnerable to remote code execution attacks",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2362",
        "messageFormat": "When deserializing untrusted input with an IFormatter-based serializer, deserializing a {0} object is insecure. '{1}' either is or derives from {0}. Ensure that the auto-generated type is never deserialized with untrusted data.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3001",
        "title": "Review code for SQL injection vulnerabilities",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3001",
        "messageFormat": "Potential SQL injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3002",
        "title": "Review code for XSS vulnerabilities",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3002",
        "messageFormat": "Potential cross-site scripting (XSS) vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3003",
        "title": "Review code for file path injection vulnerabilities",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3003",
        "messageFormat": "Potential file path injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3004",
        "title": "Review code for information disclosure vulnerabilities",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3004",
        "messageFormat": "Potential information disclosure vulnerability was found where '{0}' in method '{1}' may contain unintended information from '{2}' in method '{3}'.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3005",
        "title": "Review code for LDAP injection vulnerabilities",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3005",
        "messageFormat": "Potential LDAP injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3006",
        "title": "Review code for process command injection vulnerabilities",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3006",
        "messageFormat": "Potential process command injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3007",
        "title": "Review code for open redirect vulnerabilities",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3007",
        "messageFormat": "Potential open redirect vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3008",
        "title": "Review code for XPath injection vulnerabilities",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3008",
        "messageFormat": "Potential XPath injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3009",
        "title": "Review code for XML injection vulnerabilities",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3009",
        "messageFormat": "Potential XML injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3010",
        "title": "Review code for XAML injection vulnerabilities",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3010",
        "messageFormat": "Potential XAML injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3011",
        "title": "Review code for DLL injection vulnerabilities",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3011",
        "messageFormat": "Potential DLL injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3012",
        "title": "Review code for regex injection vulnerabilities",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3012",
        "messageFormat": "Potential regex injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3061",
        "title": "Do Not Add Schema By URL",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "This overload of XmlSchemaCollection.Add method internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3061",
        "messageFormat": "This overload of the Add method is potentially unsafe because it may resolve dangerous external references",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5350",
        "title": "Do Not Use Weak Cryptographic Algorithms",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Cryptographic algorithms degrade over time as attacks become for advances to attacker get access to more computation. Depending on the type and application of this cryptographic algorithm, further degradation of the cryptographic strength of it may allow attackers to read enciphered messages, tamper with enciphered  messages, forge digital signatures, tamper with hashed content, or otherwise compromise any cryptosystem based on this algorithm. Replace encryption uses with the AES algorithm (AES-256, AES-192 and AES-128 are acceptable) with a key length greater than or equal to 128 bits. Replace hashing uses with a hashing function in the SHA-2 family, such as SHA-2 512, SHA-2 384, or SHA-2 256.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5350",
        "messageFormat": "{0} uses a weak cryptographic algorithm {1}",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5351",
        "title": "Do Not Use Broken Cryptographic Algorithms",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "An attack making it computationally feasible to break this algorithm exists. This allows attackers to break the cryptographic guarantees it is designed to provide. Depending on the type and application of this cryptographic algorithm, this may allow attackers to read enciphered messages, tamper with enciphered  messages, forge digital signatures, tamper with hashed content, or otherwise compromise any cryptosystem based on this algorithm. Replace encryption uses with the AES algorithm (AES-256, AES-192 and AES-128 are acceptable) with a key length greater than or equal to 128 bits. Replace hashing uses with a hashing function in the SHA-2 family, such as SHA512, SHA384, or SHA256. Replace digital signature uses with RSA with a key length greater than or equal to 2048-bits, or ECDSA with a key length greater than or equal to 256 bits.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5351",
        "messageFormat": "{0} uses a broken cryptographic algorithm {1}",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5358",
        "title": "Review cipher mode usage with cryptography experts",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "These cipher modes might be vulnerable to attacks. Consider using recommended modes (CBC, CTS).",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5358",
        "messageFormat": "Review the usage of cipher mode '{0}' with cryptography experts. Consider using recommended modes (CBC, CTS).",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5359",
        "title": "Do Not Disable Certificate Validation",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "A certificate can help authenticate the identity of the server. Clients should validate the server certificate to ensure requests are sent to the intended server. If the ServerCertificateValidationCallback always returns 'true', any certificate will pass validation.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5359",
        "messageFormat": "The ServerCertificateValidationCallback is set to a function that accepts any server certificate, by always returning true. Ensure that server certificates are validated to verify the identity of the server receiving requests.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5360",
        "title": "Do Not Call Dangerous Methods In Deserialization",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Insecure Deserialization is a vulnerability which occurs when untrusted data is used to abuse the logic of an application, inflict a Denial-of-Service (DoS) attack, or even execute arbitrary code upon it being deserialized. It’s frequently possible for malicious users to abuse these deserialization features when the application is deserializing untrusted data which is under their control. Specifically, invoke dangerous methods in the process of deserialization. Successful insecure deserialization attacks could allow an attacker to carry out attacks such as DoS attacks, authentication bypasses, and remote code execution.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5360",
        "messageFormat": "When deserializing an instance of class {0}, method {1} can call dangerous method {2}",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA5361",
        "title": "Do Not Disable SChannel Use of Strong Crypto",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "Starting with the .NET Framework 4.6, the System.Net.ServicePointManager and System.Net.Security.SslStream classes are recommended to use new protocols. The old ones have protocol weaknesses and are not supported. Setting Switch.System.Net.DontEnableSchUseStrongCrypto with true will use the old weak crypto check and opt out of the protocol migration.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5361",
        "messageFormat": "{0} disables TLS 1.2 and enables SSLv3",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5362",
        "title": "Potential reference cycle in deserialized object graph",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "Review code that processes untrusted deserialized data for handling of unexpected reference cycles. An unexpected reference cycle should not cause the code to enter an infinite loop. Otherwise, an unexpected reference cycle can allow an attacker to DOS or exhaust the memory of the process when deserializing untrusted data.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5362",
        "messageFormat": "{0} participates in a potential reference cycle",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA5363",
        "title": "Do Not Disable Request Validation",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Request validation is a feature in ASP.NET that examines HTTP requests and determines whether they contain potentially dangerous content. This check adds protection from markup or code in the URL query string, cookies, or posted form values that might have been added for malicious purposes. So, it is generally desirable and should be left enabled for defense in depth.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5363",
        "messageFormat": "{0} has request validation disabled",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5364",
        "title": "Do Not Use Deprecated Security Protocols",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Using a deprecated security protocol rather than the system default is risky.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5364",
        "messageFormat": "Hard-coded use of deprecated security protocol {0}",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5365",
        "title": "Do Not Disable HTTP Header Checking",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "HTTP header checking enables encoding of the carriage return and newline characters, \\r and \\n, that are found in response headers. This encoding can help to avoid injection attacks that exploit an application that echoes untrusted data contained by the header.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5365",
        "messageFormat": "Do not disable HTTP header checking",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5366",
        "title": "Use XmlReader for 'DataSet.ReadXml()'",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Processing XML from untrusted data may load dangerous external references, which should be restricted by using an XmlReader with a secure resolver or with DTD processing disabled.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5366",
        "messageFormat": "This overload of the '{0}.{1}' method is potentially unsafe. It may enable Document Type Definition (DTD) which can be vulnerable to denial of service attacks, or might use an XmlResolver which can be vulnerable to information disclosure. Use an overload that takes a XmlReader instance instead, with DTD processing disabled and no XmlResolver.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5367",
        "title": "Do Not Serialize Types With Pointer Fields",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "Pointers are not \"type safe\" in the sense that you cannot guarantee the correctness of the memory they point at. So, serializing types with pointer fields is dangerous, as it may allow an attacker to control the pointer.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5367",
        "messageFormat": "Pointer field {0} on serializable type",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA5368",
        "title": "Set ViewStateUserKey For Classes Derived From Page",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Setting the ViewStateUserKey property can help you prevent attacks on your application by allowing you to assign an identifier to the view-state variable for individual users so that they cannot use the variable to generate an attack. Otherwise, there will be cross-site request forgery vulnerabilities.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5368",
        "messageFormat": "The class {0} derived from System.Web.UI.Page does not set the ViewStateUserKey property in the OnInit method or Page_Init method",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5369",
        "title": "Use XmlReader for 'XmlSerializer.Deserialize()'",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Processing XML from untrusted data may load dangerous external references, which should be restricted by using an XmlReader with a secure resolver or with DTD processing disabled.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5369",
        "messageFormat": "This overload of the '{0}.{1}' method is potentially unsafe. It may enable Document Type Definition (DTD) which can be vulnerable to denial of service attacks, or might use an XmlResolver which can be vulnerable to information disclosure. Use an overload that takes a XmlReader instance instead, with DTD processing disabled and no XmlResolver.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5370",
        "title": "Use XmlReader for XmlValidatingReader constructor",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Processing XML from untrusted data may load dangerous external references, which should be restricted by using an XmlReader with a secure resolver or with DTD processing disabled.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5370",
        "messageFormat": "This overload of the '{0}.{1}' method is potentially unsafe. It may enable Document Type Definition (DTD) which can be vulnerable to denial of service attacks, or might use an XmlResolver which can be vulnerable to information disclosure. Use an overload that takes a XmlReader instance instead, with DTD processing disabled and no XmlResolver.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5371",
        "title": "Use XmlReader for 'XmlSchema.Read()'",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Processing XML from untrusted data may load dangerous external references, which should be restricted by using an XmlReader with a secure resolver or with DTD processing disabled.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5371",
        "messageFormat": "This overload of the '{0}.{1}' method is potentially unsafe. It may enable Document Type Definition (DTD) which can be vulnerable to denial of service attacks, or might use an XmlResolver which can be vulnerable to information disclosure. Use an overload that takes a XmlReader instance instead, with DTD processing disabled and no XmlResolver.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5372",
        "title": "Use XmlReader for XPathDocument constructor",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Processing XML from untrusted data may load dangerous external references, which should be restricted by using an XmlReader with a secure resolver or with DTD processing disabled.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5372",
        "messageFormat": "This overload of the '{0}.{1}' method is potentially unsafe. It may enable Document Type Definition (DTD) which can be vulnerable to denial of service attacks, or might use an XmlResolver which can be vulnerable to information disclosure. Use an overload that takes a XmlReader instance instead, with DTD processing disabled and no XmlResolver.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5373",
        "title": "Do not use obsolete key derivation function",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Password-based key derivation should use PBKDF2 with SHA-2. Avoid using PasswordDeriveBytes since it generates a PBKDF1 key. Avoid using Rfc2898DeriveBytes.CryptDeriveKey since it doesn't use the iteration count or salt.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5373",
        "messageFormat": "Call to obsolete key derivation function {0}.{1}",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5374",
        "title": "Do Not Use XslTransform",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5374",
        "messageFormat": "Do not use XslTransform. It does not restrict potentially dangerous external references.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5375",
        "title": "Do Not Use Account Shared Access Signature",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "Shared Access Signatures(SAS) are a vital part of the security model for any application using Azure Storage, they should provide limited and safe permissions to your storage account to clients that don't have the account key. All of the operations available via a service SAS are also available via an account SAS, that is, account SAS is too powerful. So it is recommended to use Service SAS to delegate access more carefully.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5375",
        "messageFormat": "Use Service SAS instead of Account SAS for fine grained access control and container-level access policy",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5376",
        "title": "Use SharedAccessProtocol HttpsOnly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "HTTPS encrypts network traffic. Use HttpsOnly, rather than HttpOrHttps, to ensure network traffic is always encrypted to help prevent disclosure of sensitive data.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5376",
        "messageFormat": "Consider using Azure's role-based access control instead of a Shared Access Signature (SAS) if possible. If you still need to use a SAS, specify SharedAccessProtocol.HttpsOnly.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5377",
        "title": "Use Container Level Access Policy",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "No access policy identifier is specified, making tokens non-revocable.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5377",
        "messageFormat": "Consider using Azure's role-based access control instead of a Shared Access Signature (SAS) if possible. If you still need to use a SAS, use a container-level access policy when creating a SAS.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5378",
        "title": "Do not disable ServicePointManagerSecurityProtocols",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5378",
        "messageFormat": "Do not set Switch.System.ServiceModel.DisableUsingServicePointManagerSecurityProtocols to true.  Setting this switch limits Windows Communication Framework (WCF) to using Transport Layer Security (TLS) 1.0, which is insecure and obsolete.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5379",
        "title": "Ensure Key Derivation Function algorithm is sufficiently strong",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Some implementations of the Rfc2898DeriveBytes class allow for a hash algorithm to be specified in a constructor parameter or overwritten in the HashAlgorithm property. If a hash algorithm is specified, then it should be SHA-256 or higher.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5379",
        "messageFormat": "{0} might be using a weak hash algorithm. Use SHA256, SHA384, or SHA512 to create a strong key from a password.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5380",
        "title": "Do Not Add Certificates To Root Store",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "By default, the Trusted Root Certification Authorities certificate store is configured with a set of public CAs that has met the requirements of the Microsoft Root Certificate Program. Since all trusted root CAs can issue certificates for any domain, an attacker can pick a weak or coercible CA that you install by yourself to target for an attack – and a single vulnerable, malicious or coercible CA undermines the security of the entire system. To make matters worse, these attacks can go unnoticed quite easily.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5380",
        "messageFormat": "Adding certificates to the operating system's trusted root certificates increases the risk of incorrectly authenticating an illegitimate certificate",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA5381",
        "title": "Ensure Certificates Are Not Added To Root Store",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "By default, the Trusted Root Certification Authorities certificate store is configured with a set of public CAs that has met the requirements of the Microsoft Root Certificate Program. Since all trusted root CAs can issue certificates for any domain, an attacker can pick a weak or coercible CA that you install by yourself to target for an attack – and a single vulnerable, malicious or coercible CA undermines the security of the entire system. To make matters worse, these attacks can go unnoticed quite easily.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5381",
        "messageFormat": "Adding certificates to the operating system's trusted root certificates is insecure. Ensure that the target store is not root store.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA5382",
        "title": "Use Secure Cookies In ASP.Net Core",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "Applications available over HTTPS must use secure cookies.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5382",
        "messageFormat": "Set CookieOptions.Secure = true when setting a cookie",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA5383",
        "title": "Ensure Use Secure Cookies In ASP.Net Core",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "Applications available over HTTPS must use secure cookies.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5383",
        "messageFormat": "Ensure that CookieOptions.Secure = true when setting a cookie",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA5384",
        "title": "Do Not Use Digital Signature Algorithm (DSA)",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "DSA is too weak to use.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5384",
        "messageFormat": "Asymmetric encryption algorithm {0} is weak. Switch to an RSA with at least 2048 key size, ECDH or ECDSA algorithm instead.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5385",
        "title": "Use Rivest–Shamir–Adleman (RSA) Algorithm With Sufficient Key Size",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Encryption algorithms are vulnerable to brute force attacks when too small a key size is used.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5385",
        "messageFormat": "Asymmetric encryption algorithm {0}'s key size is less than 2048. Switch to an RSA with at least 2048 key size, ECDH or ECDSA algorithm instead.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5386",
        "title": "Avoid hardcoding SecurityProtocolType value",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5386",
        "messageFormat": "Avoid hardcoding SecurityProtocolType {0}, and instead use SecurityProtocolType.SystemDefault to allow the operating system to choose the best Transport Layer Security protocol to use.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5387",
        "title": "Do Not Use Weak Key Derivation Function With Insufficient Iteration Count",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "When deriving cryptographic keys from user-provided inputs such as password, use sufficient iteration count (at least 100k).",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5387",
        "messageFormat": "Use at least {0} iterations when deriving a cryptographic key from a password. By default, Rfc2898DeriveByte's IterationCount is only 1000",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA5388",
        "title": "Ensure Sufficient Iteration Count When Using Weak Key Derivation Function",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "When deriving cryptographic keys from user-provided inputs such as password, use sufficient iteration count (at least 100k).",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5388",
        "messageFormat": "Ensure that the iteration count is at least {0} when deriving a cryptographic key from a password. By default, Rfc2898DeriveByte's IterationCount is only 1000",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA5389",
        "title": "Do Not Add Archive Item's Path To The Target File System Path",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "When extracting files from an archive and using the archive item's path, check if the path is safe. Archive path can be relative and can lead to file system access outside of the expected file system target path, leading to malicious config changes and remote code execution via lay-and-wait technique.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5389",
        "messageFormat": "When creating path for '{0} in method {1}' from relative archive item path to extract file and the source is an untrusted zip archive, make sure to sanitize relative archive item path '{2} in method {3}'",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5390",
        "title": "Do not hard-code encryption key",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "SymmetricAlgorithm's .Key property, or a method's rgbKey parameter, should never be a hard-coded value.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5390",
        "messageFormat": "Potential security vulnerability was found where '{0}' in method '{1}' may be tainted by hard-coded key from '{2}' in method '{3}'",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5391",
        "title": "Use antiforgery tokens in ASP.NET Core MVC controllers",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "Handling a POST, PUT, PATCH, or DELETE request without validating an antiforgery token may be vulnerable to cross-site request forgery attacks. A cross-site request forgery attack can send malicious requests from an authenticated user to your ASP.NET Core MVC controller.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5391",
        "messageFormat": "Method {0} handles a {1} request without performing antiforgery token validation. You also need to ensure that your HTML form sends an antiforgery token.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA5392",
        "title": "Use DefaultDllImportSearchPaths attribute for P/Invokes",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "By default, P/Invokes using DllImportAttribute probe a number of directories, including the current working directory for the library to load. This can be a security issue for certain applications, leading to DLL hijacking.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5392",
        "messageFormat": "The method {0} didn't use DefaultDllImportSearchPaths attribute for P/Invokes.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5393",
        "title": "Do not use unsafe DllImportSearchPath value",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "There could be a malicious DLL in the default DLL search directories. Or, depending on where your application is run from, there could be a malicious DLL in the application's directory. Use a DllImportSearchPath value that specifies an explicit search path instead. The DllImportSearchPath flags that this rule looks for can be configured in .editorconfig.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5393",
        "messageFormat": "Use of unsafe DllImportSearchPath value {0}",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5394",
        "title": "Do not use insecure randomness",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "Using a cryptographically weak pseudo-random number generator may allow an attacker to predict what security-sensitive value will be generated. Use a cryptographically strong random number generator if an unpredictable value is required, or ensure that weak pseudo-random numbers aren't used in a security-sensitive manner.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5394",
        "messageFormat": "{0} is an insecure random number generator. Use cryptographically secure random number generators when randomness is required for security.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5395",
        "title": "Miss HttpVerb attribute for action methods",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "All the methods that create, edit, delete, or otherwise modify data do so in the [HttpPost] overload of the method, which needs to be protected with the anti forgery attribute from request forgery. Performing a GET operation should be a safe operation that has no side effects and doesn't modify your persisted data.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5395",
        "messageFormat": "Action method {0} needs to specify the HTTP request kind explicitly",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA5396",
        "title": "Set HttpOnly to true for HttpCookie",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "As a defense in depth measure, ensure security sensitive HTTP cookies are marked as HttpOnly. This indicates web browsers should disallow scripts from accessing the cookies. Injected malicious scripts are a common way of stealing cookies.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5396",
        "messageFormat": "HttpCookie.HttpOnly is set to false or not set at all when using an HttpCookie. Ensure security sensitive cookies are marked as HttpOnly to prevent malicious scripts from stealing the cookies",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA5397",
        "title": "Do not use deprecated SslProtocols values",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Older protocol versions of Transport Layer Security (TLS) are less secure than TLS 1.2 and TLS 1.3, and are more likely to have new vulnerabilities. Avoid older protocol versions to minimize risk.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5397",
        "messageFormat": "Transport Layer Security protocol version '{0}' is deprecated.  Use 'None' to let the Operating System choose a version.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5398",
        "title": "Avoid hardcoded SslProtocols values",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "Current Transport Layer Security protocol versions may become deprecated if vulnerabilities are found. Avoid hardcoding SslProtocols values to keep your application secure. Use 'None' to let the Operating System choose a version.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5398",
        "messageFormat": "Avoid hardcoding SslProtocols '{0}' to ensure your application remains secure in the future. Use 'None' to let the Operating System choose a version.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA5399",
        "title": "HttpClients should enable certificate revocation list checks",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "Using HttpClient without providing a platform specific handler (WinHttpHandler or CurlHandler or HttpClientHandler) where the CheckCertificateRevocationList property is set to true, will allow revoked certificates to be accepted by the HttpClient as valid.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5399",
        "messageFormat": "HttpClient is created without enabling CheckCertificateRevocationList",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA5400",
        "title": "Ensure HttpClient certificate revocation list check is not disabled",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "Using HttpClient without providing a platform specific handler (WinHttpHandler or CurlHandler or HttpClientHandler) where the CheckCertificateRevocationList property is set to true, will allow revoked certificates to be accepted by the HttpClient as valid.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5400",
        "messageFormat": "HttpClient may be created without enabling CheckCertificateRevocationList",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA5401",
        "title": "Do not use CreateEncryptor with non-default IV",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "Symmetric encryption should always use a non-repeatable initialization vector to prevent dictionary attacks.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5401",
        "messageFormat": "Symmetric encryption uses non-default initialization vector, which could be potentially repeatable",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA5402",
        "title": "Use CreateEncryptor with the default IV ",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "Symmetric encryption should always use a non-repeatable initialization vector to prevent dictionary attacks.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5402",
        "messageFormat": "The non-default initialization vector, which can be potentially repeatable, is used in the encryption. Ensure use the default one.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA5403",
        "title": "Do not hard-code certificate",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "Hard-coded certificates in source code are vulnerable to being exploited.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca5403",
        "messageFormat": "Potential security vulnerability was found where '{0}' in method '{1}' may be tainted by hard-coded certificate from '{2}' in method '{3}'",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA9998",
        "title": "Analyzer package has been deprecated",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/visualstudio/code-quality/migrate-from-fxcop-analyzers-to-net-analyzers",
        "messageFormat": "FxCopAnalyzers package has been deprecated in favor of 'Microsoft.CodeAnalysis.NetAnalyzers', that ships with the .NET SDK. Please refer to https://docs.microsoft.com/visualstudio/code-quality/migrate-from-fxcop-analyzers-to-net-analyzers to migrate to .NET analyzers.",
        "customTags": []
      },
      {
        "id": "IL3000",
        "title": "Avoid using accessing Assembly file path when publishing as a single-file",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Publish",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/il3000",
        "messageFormat": "'{0}' always returns an empty string for assemblies embedded in a single-file app. If the path to the app directory is needed, consider calling 'System.AppContext.BaseDirectory'.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "IL3001",
        "title": "Avoid using accessing Assembly file path when publishing as a single-file",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Publish",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/il3001",
        "messageFormat": "'{0}' will throw for assemblies embedded in a single-file app",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      }
    ]
  },
  {
    "id": "Microsoft.CodeAnalysis.VersionCheckAnalyzer",
    "version": "3.3.2",
    "description": "Microsoft.CodeAnalysis Version Check Analyzer",
    "diagnostics": [
      {
        "id": "CA9999",
        "title": "Analyzer version mismatch",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "Analyzers in this package require a certain minimum version of Microsoft.CodeAnalysis to execute correctly. Refer to https://docs.microsoft.com/visualstudio/code-quality/install-fxcop-analyzers#fxcopanalyzers-package-versions to install the correct analyzer version.",
        "helpLinkUri": "",
        "messageFormat": "Version mismatch between the analyzer package '{0}' and Microsoft.CodeAnalysis '{1}'. Certain analyzers in this package will not run until the version mismatch is fixed. Refer to https://docs.microsoft.com/visualstudio/code-quality/install-fxcop-analyzers#fxcopanalyzers-package-versions to install the correct analyzer version.",
        "customTags": []
      }
    ]
  },
  {
    "id": "Microsoft.CodeQuality.Analyzers",
    "version": "3.3.2",
    "description": "Microsoft recommended code quality rules implemented as analyzers using the .NET Compiler Platform (Roslyn). This package is included as a part of Microsoft.CodeAnalysis.FxCopAnalyzers NuGet package and does not need to be installed separately.",
    "diagnostics": [
      {
        "id": "CA1000",
        "title": "Do not declare static members on generic types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "When a static member of a generic type is called, the type argument must be specified for the type. When a generic instance member that does not support inference is called, the type argument must be specified for the member. In these two cases, the syntax for specifying the type argument is different and easily confused.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1000",
        "messageFormat": "Do not declare static members on generic types",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1001",
        "title": "Types that own disposable fields should be disposable",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "A class declares and implements an instance field that is a System.IDisposable type, and the class does not implement IDisposable. A class that declares an IDisposable field indirectly owns an unmanaged resource and should implement the IDisposable interface.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1001",
        "messageFormat": "Type '{0}' owns disposable field(s) '{1}' but is not disposable",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1002",
        "title": "Do not expose generic lists",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "System.Collections.Generic.List<T> is a generic collection that's designed for performance and not inheritance. List<T> does not contain virtual members that make it easier to change the behavior of an inherited class.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1002",
        "messageFormat": "Change '{0}' in '{1}' to use 'Collection<T>', 'ReadOnlyCollection<T>' or 'KeyedCollection<K,V>'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1003",
        "title": "Use generic event handler instances",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "A type contains a delegate that returns void, whose signature contains two parameters (the first an object and the second a type that is assignable to EventArgs), and the containing assembly targets Microsoft .NET Framework?2.0.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1003",
        "messageFormat": "Remove '{0}' and replace its usage with a generic EventHandler, for example EventHandler<T>, where T is a valid EventArgs",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1003",
        "title": "Use generic event handler instances",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "A delegate that handles a public or protected event does not have the correct signature, return type, or parameter names.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1003",
        "messageFormat": "Change the event '{0}' to replace the type '{1}' with a generic EventHandler, for example EventHandler<T>, where T is a valid EventArgs",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1003",
        "title": "Use generic event handler instances",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "A type contains an event that declares an EventHandler delegate that returns void, whose signature contains two parameters (the first an object and the second a type that is assignable to EventArgs), and the containing assembly targets Microsoft .NET Framework?2.0.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1003",
        "messageFormat": "Change the event '{0}' to use a generic EventHandler by defining the event type explicitly, for e.g. Event MyEvent As EventHandler(Of MyEventArgs).",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1005",
        "title": "Avoid excessive parameters on generic types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "The more type parameters a generic type contains, the more difficult it is to know and remember what each type parameter represents.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1005",
        "messageFormat": "Consider a design where '{0}' has no more than {1} type parameters",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry"
        ]
      },
      {
        "id": "CA1008",
        "title": "Enums should have zero value",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "The default value of an uninitialized enumeration, just as other value types, is zero. A nonflags-attributed enumeration should define a member by using the value of zero so that the default value is a valid value of the enumeration. If an enumeration that has the FlagsAttribute attribute applied defines a zero-valued member, its name should be \"\"None\"\" to indicate that no values have been set in the enumeration.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1008",
        "messageFormat": "In enum {0}, change the name of {1} to 'None'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "RuleRename"
        ]
      },
      {
        "id": "CA1008",
        "title": "Enums should have zero value",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "The default value of an uninitialized enumeration, just as other value types, is zero. A nonflags-attributed enumeration should define a member by using the value of zero so that the default value is a valid value of the enumeration. If an enumeration that has the FlagsAttribute attribute applied defines a zero-valued member, its name should be \"\"None\"\" to indicate that no values have been set in the enumeration.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1008",
        "messageFormat": "Remove all members that have the value zero from {0} except for one member that is named 'None'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "RuleMultipleZero"
        ]
      },
      {
        "id": "CA1008",
        "title": "Enums should have zero value",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "The default value of an uninitialized enumeration, just as other value types, is zero. A nonflags-attributed enumeration should define a member by using the value of zero so that the default value is a valid value of the enumeration. If an enumeration that has the FlagsAttribute attribute applied defines a zero-valued member, its name should be \"\"None\"\" to indicate that no values have been set in the enumeration.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1008",
        "messageFormat": "Add a member to {0} that has a value of zero with a suggested name of 'None'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "RuleNoZero"
        ]
      },
      {
        "id": "CA1010",
        "title": "Generic interface should also be implemented",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "To broaden the usability of a type, implement one of the generic interfaces. This is especially true for collections as they can then be used to populate generic collection types.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1010",
        "messageFormat": "Type '{0}' directly or indirectly inherits '{1}' without implementing '{2}'. Publicly-visible types should implement the generic version to broaden usability.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1012",
        "title": "Abstract types should not have public constructors",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "Constructors on abstract types can be called only by derived types. Because public constructors create instances of a type, and you cannot create instances of an abstract type, an abstract type that has a public constructor is incorrectly designed.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1012",
        "messageFormat": "Abstract type '{0}' should not have public constructors",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1014",
        "title": "Mark assemblies with CLSCompliant",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "The Common Language Specification (CLS) defines naming restrictions, data types, and rules to which assemblies must conform if they will be used across programming languages. Good design dictates that all assemblies explicitly indicate CLS compliance by using CLSCompliantAttribute . If this attribute is not present on an assembly, the assembly is not compliant.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1014",
        "messageFormat": "Mark assemblies with CLSCompliant",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA1016",
        "title": "Mark assemblies with assembly version",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "The .NET Framework uses the version number to uniquely identify an assembly, and to bind to types in strongly named assemblies. The version number is used together with version and publisher policy. By default, applications run only with the assembly version with which they were built.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1016",
        "messageFormat": "Mark assemblies with assembly version",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA1017",
        "title": "Mark assemblies with ComVisible",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "ComVisibleAttribute determines how COM clients access managed code. Good design dictates that assemblies explicitly indicate COM visibility. COM visibility can be set for the whole assembly and then overridden for individual types and type members. If this attribute is not present, the contents of the assembly are visible to COM clients.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1017",
        "messageFormat": "Consider changing the ComVisible attribute on {0} to false, and opting in at the type level",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA1017",
        "title": "Mark assemblies with ComVisible",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "ComVisibleAttribute determines how COM clients access managed code. Good design dictates that assemblies explicitly indicate COM visibility. COM visibility can be set for the whole assembly and then overridden for individual types and type members. If this attribute is not present, the contents of the assembly are visible to COM clients.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1017",
        "messageFormat": "Because {0} exposes externally visible types, mark it with ComVisible(false) at the assembly level and then mark all types within the assembly that should be exposed to COM clients with ComVisible(true)",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA1018",
        "title": "Mark attributes with AttributeUsageAttribute",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1018",
        "messageFormat": "Specify AttributeUsage on {0}",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1019",
        "title": "Define accessors for attribute arguments",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1019",
        "messageFormat": "Add a public read-only property accessor for positional argument {0} of Attribute {1}",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1019",
        "title": "Define accessors for attribute arguments",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1019",
        "messageFormat": "If {0} is the property accessor for positional argument {1}, make it public",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1019",
        "title": "Define accessors for attribute arguments",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1019",
        "messageFormat": "Remove the property setter from {0} or reduce its accessibility because it corresponds to positional argument {1}",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1021",
        "title": "Avoid out parameters",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "Passing types by reference (using 'out' or 'ref') requires experience with pointers, understanding how value types and reference types differ, and handling methods with multiple return values. Also, the difference between 'out' and 'ref' parameters is not widely understood.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1021",
        "messageFormat": "Avoid 'out' parameters as they are not designed for general audience",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry"
        ]
      },
      {
        "id": "CA1024",
        "title": "Use properties where appropriate",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "A public or protected method has a name that starts with \"\"Get\"\", takes no parameters, and returns a value that is not an array. The method might be a good candidate to become a property.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1024",
        "messageFormat": "Use properties where appropriate",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1027",
        "title": "Mark enums with FlagsAttribute",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "An enumeration is a value type that defines a set of related named constants. Apply FlagsAttribute to an enumeration when its named constants can be meaningfully combined.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1027",
        "messageFormat": "Mark enums with FlagsAttribute",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1028",
        "title": "Enum Storage should be Int32",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "An enumeration is a value type that defines a set of related named constants. By default, the System.Int32 data type is used to store the constant value. Although you can change this underlying type, it is not required or recommended for most scenarios.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1028",
        "messageFormat": "If possible, make the underlying type of {0} System.Int32 instead of {1}",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1030",
        "title": "Use events where appropriate",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "This rule detects methods that have names that ordinarily would be used for events. If a method is called in response to a clearly defined state change, the method should be invoked by an event handler. Objects that call the method should raise events instead of calling the method directly.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1030",
        "messageFormat": "Consider making '{0}' an event",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1031",
        "title": "Do not catch general exception types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "A general exception such as System.Exception or System.SystemException or a disallowed exception type is caught in a catch statement, or a general catch clause is used. General and disallowed exceptions should not be caught.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1031",
        "messageFormat": "Modify '{0}' to catch a more specific allowed exception type, or rethrow the exception",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1032",
        "title": "Implement standard exception constructors",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "Failure to provide the full set of constructors can make it difficult to correctly handle exceptions.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1032",
        "messageFormat": "Add the following constructor to {0}: {1}",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1033",
        "title": "Interface methods should be callable by child types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "An unsealed externally visible type provides an explicit method implementation of a public interface and does not provide an alternative externally visible method that has the same name.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1033",
        "messageFormat": "Make '{0}' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of '{1}' and is visible to derived classes",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1034",
        "title": "Nested types should not be visible",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "A nested type is a type that is declared in the scope of another type. Nested types are useful to encapsulate private implementation details of the containing type. Used for this purpose, nested types should not be externally visible.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1034",
        "messageFormat": "Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1034",
        "title": "Nested types should not be visible",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "A nested type is a type that is declared in the scope of another type. Nested types are useful to encapsulate private implementation details of the containing type. Used for this purpose, nested types should not be externally visible.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1034",
        "messageFormat": "Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible. If this type is defined in a Visual Basic Module, it will be considered a nested type to other .NET languages. In that case, consider moving the type outside of the Module.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1036",
        "title": "Override methods on comparable types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "A public or protected type implements the System.IComparable interface. It does not override Object.Equals nor does it overload the language-specific operator for equality, inequality, less than, less than or equal, greater than or greater than or equal.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1036",
        "messageFormat": "{0} should define operator(s) '{1}' and Equals since it implements IComparable",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1036",
        "title": "Override methods on comparable types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "A public or protected type implements the System.IComparable interface. It does not override Object.Equals nor does it overload the language-specific operator for equality, inequality, less than, less than or equal, greater than or greater than or equal.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1036",
        "messageFormat": "{0} should override Equals since it implements IComparable",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1036",
        "title": "Override methods on comparable types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "A public or protected type implements the System.IComparable interface. It does not override Object.Equals nor does it overload the language-specific operator for equality, inequality, less than, less than or equal, greater than or greater than or equal.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1036",
        "messageFormat": "{0} should define operator(s) '{1}' since it implements IComparable",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1040",
        "title": "Avoid empty interfaces",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "Interfaces define members that provide a behavior or usage contract. The functionality that is described by the interface can be adopted by any type, regardless of where the type appears in the inheritance hierarchy. A type implements an interface by providing implementations for the members of the interface. An empty interface does not define any members; therefore, it does not define a contract that can be implemented.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1040",
        "messageFormat": "Avoid empty interfaces",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1041",
        "title": "Provide ObsoleteAttribute message",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "A type or member is marked by using a System.ObsoleteAttribute attribute that does not have its ObsoleteAttribute.Message property specified. When a type or member that is marked by using ObsoleteAttribute is compiled, the Message property of the attribute is displayed. This gives the user information about the obsolete type or member.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1041",
        "messageFormat": "Provide a message for the ObsoleteAttribute that marks {0} as Obsolete",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1043",
        "title": "Use Integral Or String Argument For Indexers",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "Indexers, that is, indexed properties, should use integer or string types for the index. These types are typically used for indexing data structures and increase the usability of the library. Use of the Object type should be restricted to those cases where the specific integer or string type cannot be specified at design time. If the design requires other types for the index, reconsider whether the type represents a logical data store. If it does not represent a logical data store, use a method.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1043",
        "messageFormat": "Use Integral Or String Argument For Indexers",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1044",
        "title": "Properties should not be write only",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "Although it is acceptable and often necessary to have a read-only property, the design guidelines prohibit the use of write-only properties. This is because letting a user set a value, and then preventing the user from viewing that value, does not provide any security. Also, without read access, the state of shared objects cannot be viewed, which limits their usefulness.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1044",
        "messageFormat": "Because property {0} is write-only, either add a property getter with an accessibility that is greater than or equal to its setter or convert this property into a method",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1044",
        "title": "Properties should not be write only",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "Although it is acceptable and often necessary to have a read-only property, the design guidelines prohibit the use of write-only properties. This is because letting a user set a value, and then preventing the user from viewing that value, does not provide any security. Also, without read access, the state of shared objects cannot be viewed, which limits their usefulness.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1044",
        "messageFormat": "Because the property getter for {0} is less visible than its setter, either increase the accessibility of its getter or decrease the accessibility of its setter",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1045",
        "title": "Do not pass types by reference",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "Passing types by reference (using out or ref) requires experience with pointers, understanding how value types and reference types differ, and handling methods that have multiple return values. Also, the difference between out and ref parameters is not widely understood.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1045",
        "messageFormat": "Consider a design that does not require that '{0}' be a reference parameter",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry"
        ]
      },
      {
        "id": "CA1046",
        "title": "Do not overload equality operator on reference types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "For reference types, the default implementation of the equality operator is almost always correct. By default, two references are equal only if they point to the same object. If the operator is providing meaningful value equality, the type should implement the generic 'System.IEquatable' interface.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1046",
        "messageFormat": "'{0}' should not overload the equality operator",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1050",
        "title": "Declare types in namespaces",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "Types are declared in namespaces to prevent name collisions and as a way to organize related types in an object hierarchy.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1050",
        "messageFormat": "Declare types in namespaces",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1051",
        "title": "Do not declare visible instance fields",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "The primary use of a field should be as an implementation detail. Fields should be private or internal and should be exposed by using properties.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1051",
        "messageFormat": "Do not declare visible instance fields",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1052",
        "title": "Static holder types should be Static or NotInheritable",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1052",
        "messageFormat": "Type '{0}' is a static holder type but is neither static nor NotInheritable",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1054",
        "title": "URI-like parameters should not be strings",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "This rule assumes that the parameter represents a Uniform Resource Identifier (URI). A string representation or a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. 'System.Uri' class provides these services in a safe and secure manner.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1054",
        "messageFormat": "Change the type of parameter '{0}' of method '{1}' from 'string' to 'System.Uri', or provide an overload to '{1}' that allows '{0}' to be passed as a 'System.Uri' object",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1055",
        "title": "URI-like return values should not be strings",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "This rule assumes that the method returns a URI. A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The System.Uri class provides these services in a safe and secure manner.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1055",
        "messageFormat": "Change the return type of method '{0}' from 'string' to 'System.Uri'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1056",
        "title": "URI-like properties should not be strings",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "This rule assumes that the property represents a Uniform Resource Identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The System.Uri class provides these services in a safe and secure manner.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1056",
        "messageFormat": "Change the type of property '{0}' from 'string' to 'System.Uri'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1060",
        "title": "Move pinvokes to native methods class",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Design",
        "description": "Platform Invocation methods, such as those that are marked by using the System.Runtime.InteropServices.DllImportAttribute attribute, or methods that are defined by using the Declare keyword in Visual Basic, access unmanaged code. These methods should be of the NativeMethods, SafeNativeMethods, or UnsafeNativeMethods class.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1060",
        "messageFormat": "Move pinvokes to native methods class",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry"
        ]
      },
      {
        "id": "CA1061",
        "title": "Do not hide base class methods",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "A method in a base type is hidden by an identically named method in a derived type when the parameter signature of the derived method differs only by types that are more weakly derived than the corresponding types in the parameter signature of the base method.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1061",
        "messageFormat": "Change or remove '{0}' because it hides a more specific base class method: '{1}'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1062",
        "title": "Validate arguments of public methods",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "An externally visible method dereferences one of its reference arguments without verifying whether that argument is null (Nothing in Visual Basic). All reference arguments that are passed to externally visible methods should be checked against null. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument. If the method is designed to be called only by known assemblies, you should make the method internal.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1062",
        "messageFormat": "In externally visible method '{0}', validate parameter '{1}' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.",
        "customTags": [
          "PortedFromFxCop",
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1063",
        "title": "Implement IDisposable Correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "All IDisposable types should implement the Dispose pattern correctly.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1063",
        "messageFormat": "Remove IDisposable from the list of interfaces implemented by '{0}' as it is already implemented by base type '{1}'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1063",
        "title": "Implement IDisposable Correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "All IDisposable types should implement the Dispose pattern correctly.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1063",
        "messageFormat": "Remove the finalizer from type '{0}', override Dispose(bool disposing), and put the finalization logic in the code path where 'disposing' is false. Otherwise, it might lead to duplicate Dispose invocations as the Base type '{1}' also provides a finalizer.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1063",
        "title": "Implement IDisposable Correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "All IDisposable types should implement the Dispose pattern correctly.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1063",
        "messageFormat": "Remove '{0}', override Dispose(bool disposing), and put the dispose logic in the code path where 'disposing' is true",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1063",
        "title": "Implement IDisposable Correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "All IDisposable types should implement the Dispose pattern correctly.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1063",
        "messageFormat": "Ensure that '{0}' is declared as public and sealed",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1063",
        "title": "Implement IDisposable Correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "All IDisposable types should implement the Dispose pattern correctly.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1063",
        "messageFormat": "Rename '{0}' to 'Dispose' and ensure that it is declared as public and sealed",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1063",
        "title": "Implement IDisposable Correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "All IDisposable types should implement the Dispose pattern correctly.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1063",
        "messageFormat": "Ensure that '{0}' is declared as protected, virtual, and unsealed",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1063",
        "title": "Implement IDisposable Correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "All IDisposable types should implement the Dispose pattern correctly.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1063",
        "messageFormat": "Modify '{0}' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1063",
        "title": "Implement IDisposable Correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "All IDisposable types should implement the Dispose pattern correctly.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1063",
        "messageFormat": "Modify '{0}' so that it calls Dispose(false) and then returns",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1063",
        "title": "Implement IDisposable Correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "All IDisposable types should implement the Dispose pattern correctly.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1063",
        "messageFormat": "Provide an overridable implementation of Dispose(bool) on '{0}' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1064",
        "title": "Exceptions should be public",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "An internal exception is visible only inside its own internal scope. After the exception falls outside the internal scope, only the base exception can be used to catch the exception. If the internal exception is inherited from T:System.Exception, T:System.SystemException, or T:System.ApplicationException, the external code will not have sufficient information to know what to do with the exception.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1064",
        "messageFormat": "Exceptions should be public",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1065",
        "title": "Do not raise exceptions in unexpected locations",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "A method that is not expected to throw exceptions throws an exception.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1065",
        "messageFormat": "{0} creates an exception of type {1}, an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1065",
        "title": "Do not raise exceptions in unexpected locations",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "A method that is not expected to throw exceptions throws an exception.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1065",
        "messageFormat": "{0} creates an exception of type {1}, an exception type that should not be raised in this type of method. If this exception instance might be raised, either use a different exception type or change this method's logic so that it no longer raises an exception.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1065",
        "title": "Do not raise exceptions in unexpected locations",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "A method that is not expected to throw exceptions throws an exception.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1065",
        "messageFormat": "{0} creates an exception of type {1}. Exceptions should not be raised in this type of method. If this exception instance might be raised, change this method's logic so it no longer raises an exception.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1066",
        "title": "Implement IEquatable when overriding Object.Equals",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "When a type T overrides Object.Equals(object), the implementation must cast the object argument to the correct type T before performing the comparison. If the type implements IEquatable<T>, and therefore offers the method T.Equals(T), and if the argument is known at compile time to be of type T, then the compiler can call IEquatable<T>.Equals(T) instead of Object.Equals(object), and no cast is necessary, improving performance.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1066",
        "messageFormat": "Type {0} should implement IEquatable<T> because it overrides Equals",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1067",
        "title": "Override Object.Equals(object) when implementing IEquatable<T>",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "When a type T implements the interface IEquatable<T>, it suggests to a user who sees a call to the Equals method in source code that an instance of the type can be equated with an instance of any other type. The user might be confused if their attempt to equate the type with an instance of another type fails to compile. This violates the \"principle of least surprise\".",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1067",
        "messageFormat": "Type {0} should override Equals because it implements IEquatable<T>",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1068",
        "title": "CancellationToken parameters must come last",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1068",
        "messageFormat": "Method '{0}' should take CancellationToken as the last parameter",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1069",
        "title": "Enums values should not be duplicated",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1069",
        "messageFormat": "The enum member '{0}' has the same constant value '{1}' as member '{2}'",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1069",
        "title": "Enums values should not be duplicated",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1069",
        "messageFormat": "The field reference '{0}' is duplicated in this bitwise initialization",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1070",
        "title": "Do not declare event fields as virtual",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "Do not declare virtual events in a base class. Overridden events in a derived class have undefined behavior. The C# compiler does not handle this correctly and it is unpredictable whether a subscriber to the derived event will actually be subscribing to the base class event.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1070",
        "messageFormat": "Event '{0}' should not be declared virtual",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1200",
        "title": "Avoid using cref tags with a prefix",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Documentation",
        "description": "Use of cref tags with prefixes should be avoided, since it prevents the compiler from verifying references and the IDE from updating references during refactorings. It is permissible to suppress this error at a single documentation site if the cref must use a prefix because the type being mentioned is not findable by the compiler. For example, if a cref is mentioning a special attribute in the full framework but you're in a file that compiles against the portable framework, or if you want to reference a type at higher layer of Roslyn, you should suppress the error. You should not suppress the error just because you want to take a shortcut and avoid using the full syntax.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1200",
        "messageFormat": "Avoid using cref tags with a prefix",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1501",
        "title": "Avoid excessive inheritance",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Maintainability",
        "description": "Deeply nested type hierarchies can be difficult to follow, understand, and maintain. This rule limits analysis to hierarchies in the same module. To fix a violation of this rule, derive the type from a base type that is less deep in the inheritance hierarchy or eliminate some of the intermediate base types.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1501",
        "messageFormat": "'{0}' has an object hierarchy '{1}' levels deep within the defining module. If possible, eliminate base classes within the hierarchy to decrease its hierarchy level below '{2}': '{3}'.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA1502",
        "title": "Avoid excessive complexity",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Maintainability",
        "description": "Cyclomatic complexity measures the number of linearly independent paths through the method, which is determined by the number and complexity of conditional branches. A low cyclomatic complexity generally indicates a method that is easy to understand, test, and maintain. The cyclomatic complexity is calculated from a control flow graph of the method and is given as follows: `cyclomatic complexity = the number of edges - the number of nodes + 1`, where a node represents a logic branch point and an edge represents a line between nodes.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1502",
        "messageFormat": "'{0}' has a cyclomatic complexity of '{1}'. Rewrite or refactor the code to decrease its complexity below '{2}'.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA1505",
        "title": "Avoid unmaintainable code",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Maintainability",
        "description": "The maintainability index is calculated by using the following metrics: lines of code, program volume, and cyclomatic complexity. Program volume is a measure of the difficulty of understanding of a symbol that is based on the number of operators and operands in the code. Cyclomatic complexity is a measure of the structural complexity of the type or method. A low maintainability index indicates that code is probably difficult to maintain and would be a good candidate to redesign.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1505",
        "messageFormat": "'{0}' has a maintainability index of '{1}'. Rewrite or refactor the code to increase its maintainability index (MI) above '{2}'.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA1506",
        "title": "Avoid excessive class coupling",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Maintainability",
        "description": "This rule measures class coupling by counting the number of unique type references that a symbol contains. Symbols that have a high degree of class coupling can be difficult to maintain. It is a good practice to have types and methods that exhibit low coupling and high cohesion. To fix this violation, try to redesign the code to reduce the number of types to which it is coupled.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1506",
        "messageFormat": "'{0}' is coupled with '{1}' different types from '{2}' different namespaces. Rewrite or refactor the code to decrease its class coupling below '{3}'.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA1507",
        "title": "Use nameof to express symbol names",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Maintainability",
        "description": "Using nameof helps keep your code valid when refactoring.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1507",
        "messageFormat": "Use nameof in place of string literal '{0}'",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1508",
        "title": "Avoid dead conditional code",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Maintainability",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1508",
        "messageFormat": "'{0}' is always '{1}'. Remove or refactor the condition(s) to avoid dead code.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1508",
        "title": "Avoid dead conditional code",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Maintainability",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1508",
        "messageFormat": "'{0}' is never '{1}'. Remove or refactor the condition(s) to avoid dead code.",
        "customTags": [
          "Dataflow",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1509",
        "title": "Invalid entry in code metrics rule specification file",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Maintainability",
        "description": "Invalid entry in code metrics rule specification file.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1509",
        "messageFormat": "Invalid entry '{0}' in code metrics rule specification file '{1}'",
        "customTags": [
          "Telemetry",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA1700",
        "title": "Do not name enum values 'Reserved'",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Naming",
        "description": "This rule assumes that an enumeration member that has a name that contains \"reserved\" is not currently used but is a placeholder to be renamed or removed in a future version. Renaming or removing a member is a breaking change.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1700",
        "messageFormat": "If '{0}.{1}' is not used in the current implementation, remove it. Otherwise give it a meaningful name.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1707",
        "title": "Identifiers should not contain underscores",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces, types, members, and parameters.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1707",
        "messageFormat": "Remove the underscores from assembly name {0}",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1707",
        "title": "Identifiers should not contain underscores",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces, types, members, and parameters.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1707",
        "messageFormat": "Remove the underscores from namespace name '{0}'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1707",
        "title": "Identifiers should not contain underscores",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces, types, members, and parameters.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1707",
        "messageFormat": "Remove the underscores from type name {0}",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1707",
        "title": "Identifiers should not contain underscores",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces, types, members, and parameters.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1707",
        "messageFormat": "Remove the underscores from member name {0}",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1707",
        "title": "Identifiers should not contain underscores",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces, types, members, and parameters.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1707",
        "messageFormat": "On type {0}, remove the underscores from generic type parameter name {1}",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1707",
        "title": "Identifiers should not contain underscores",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces, types, members, and parameters.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1707",
        "messageFormat": "On method {0}, remove the underscores from generic type parameter name {1}",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1707",
        "title": "Identifiers should not contain underscores",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces, types, members, and parameters.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1707",
        "messageFormat": "In member {0}, remove the underscores from parameter name {1}",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1707",
        "title": "Identifiers should not contain underscores",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces, types, members, and parameters.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1707",
        "messageFormat": "In delegate {0}, remove the underscores from parameter name {1}",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1708",
        "title": "Identifiers should differ by more than case",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Naming",
        "description": "Identifiers for namespaces, types, members, and parameters cannot differ only by case because languages that target the common language runtime are not required to be case-sensitive.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1708",
        "messageFormat": "Names of '{0}' and '{1}' should differ by more than case",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1710",
        "title": "Identifiers should have correct suffix",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "By convention, the names of types that extend certain base types or that implement certain interfaces, or types that are derived from these types, have a suffix that is associated with the base type or interface.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1710",
        "messageFormat": "Rename {0} to end in '{1}'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1710",
        "title": "Identifiers should have correct suffix",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "By convention, the names of types that extend certain base types or that implement certain interfaces, or types that are derived from these types, have a suffix that is associated with the base type or interface.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1710",
        "messageFormat": "Rename {0} to end in either 'Collection' or '{1}'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1711",
        "title": "Identifiers should not have incorrect suffix",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Naming",
        "description": "By convention, only the names of types that extend certain base types or that implement certain interfaces, or types that are derived from these types, should end with specific reserved suffixes. Other type names should not use these reserved suffixes.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1711",
        "messageFormat": "Rename type name {0} so that it does not end in '{1}'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1711",
        "title": "Identifiers should not have incorrect suffix",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Naming",
        "description": "By convention, only the names of types that extend certain base types or that implement certain interfaces, or types that are derived from these types, should end with specific reserved suffixes. Other type names should not use these reserved suffixes.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1711",
        "messageFormat": "Either replace the suffix '{0}' in member name {1} with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the member it replaces",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1711",
        "title": "Identifiers should not have incorrect suffix",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Naming",
        "description": "By convention, only the names of types that extend certain base types or that implement certain interfaces, or types that are derived from these types, should end with specific reserved suffixes. Other type names should not use these reserved suffixes.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1711",
        "messageFormat": "Either replace the suffix '{0}' in type name {1} with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the type it replaces",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1711",
        "title": "Identifiers should not have incorrect suffix",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Naming",
        "description": "By convention, only the names of types that extend certain base types or that implement certain interfaces, or types that are derived from these types, should end with specific reserved suffixes. Other type names should not use these reserved suffixes.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1711",
        "messageFormat": "Either replace the suffix '{0}' in member name '{1}' with the suggested alternate '{2}' or remove the suffix completely",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1712",
        "title": "Do not prefix enum values with type name",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "An enumeration's values should not start with the type name of the enumeration.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1712",
        "messageFormat": "Do not prefix enum values with the name of the enum type '{0}'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1713",
        "title": "Events should not have 'Before' or 'After' prefix",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "Event names should describe the action that raises the event. To name related events that are raised in a specific sequence, use the present or past tense to indicate the relative position in the sequence of actions. For example, when naming a pair of events that is raised when closing a resource, you might name it 'Closing' and 'Closed', instead of 'BeforeClose' and 'AfterClose'.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1713",
        "messageFormat": "Events should not have 'Before' or 'After' prefix",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1714",
        "title": "Flags enums should have plural names",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "A public enumeration has the System.FlagsAttribute attribute, and its name does not end in \"\"s\"\". Types that are marked by using FlagsAttribute have names that are plural because the attribute indicates that more than one value can be specified.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1714",
        "messageFormat": "Flags enums should have plural names",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1715",
        "title": "Identifiers should have correct prefix",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "The name of an externally visible interface does not start with an uppercase \"\"I\"\". The name of a generic type parameter on an externally visible type or method does not start with an uppercase \"\"T\"\".",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1715",
        "messageFormat": "Prefix interface name {0} with 'I'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1715",
        "title": "Identifiers should have correct prefix",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "The name of an externally visible interface does not start with an uppercase \"\"I\"\". The name of a generic type parameter on an externally visible type or method does not start with an uppercase \"\"T\"\".",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1715",
        "messageFormat": "Prefix generic type parameter name {0} with 'T'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1716",
        "title": "Identifiers should not match keywords",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "A namespace name or a type name matches a reserved keyword in a programming language. Identifiers for namespaces and types should not match keywords that are defined by languages that target the common language runtime.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1716",
        "messageFormat": "In virtual/interface member {0}, rename parameter {1} so that it no longer conflicts with the reserved language keyword '{2}'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1716",
        "title": "Identifiers should not match keywords",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "A namespace name or a type name matches a reserved keyword in a programming language. Identifiers for namespaces and types should not match keywords that are defined by languages that target the common language runtime.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1716",
        "messageFormat": "Rename virtual/interface member {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1716",
        "title": "Identifiers should not match keywords",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "A namespace name or a type name matches a reserved keyword in a programming language. Identifiers for namespaces and types should not match keywords that are defined by languages that target the common language runtime.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1716",
        "messageFormat": "Rename type {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1716",
        "title": "Identifiers should not match keywords",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "A namespace name or a type name matches a reserved keyword in a programming language. Identifiers for namespaces and types should not match keywords that are defined by languages that target the common language runtime.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1716",
        "messageFormat": "Rename namespace {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a namespace makes it harder for consumers in other languages to use the namespace.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1717",
        "title": "Only FlagsAttribute enums should have plural names",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "Naming conventions dictate that a plural name for an enumeration indicates that more than one value of the enumeration can be specified at the same time.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1717",
        "messageFormat": "Only FlagsAttribute enums should have plural names",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1720",
        "title": "Identifier contains type name",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "Names of parameters and members are better used to communicate their meaning than to describe their type, which is expected to be provided by development tools. For names of members, if a data type name must be used, use a language-independent name instead of a language-specific one.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1720",
        "messageFormat": "Identifier '{0}' contains type name",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1721",
        "title": "Property names should not match get methods",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "The name of a public or protected member starts with \"\"Get\"\" and otherwise matches the name of a public or protected property. \"\"Get\"\" methods and properties should have names that clearly distinguish their function.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1721",
        "messageFormat": "The property name '{0}' is confusing given the existence of method '{1}'. Rename or remove one of these members.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1724",
        "title": "Type names should not match namespaces",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "Type names should not match the names of namespaces that are defined in the .NET Framework class library. Violating this rule can reduce the usability of the library.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1724",
        "messageFormat": "The type name {0} conflicts in whole or in part with the namespace name '{1}'. Change either name to eliminate the conflict.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA1724",
        "title": "Type names should not match namespaces",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Naming",
        "description": "Type names should not match the names of namespaces that are defined in the .NET Framework class library. Violating this rule can reduce the usability of the library.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1724",
        "messageFormat": "The type name {0} conflicts in whole or in part with the namespace name '{1}' defined in the .NET Framework. Rename the type to eliminate the conflict.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA1725",
        "title": "Parameter names should match base declaration",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Naming",
        "description": "Consistent naming of parameters in an override hierarchy increases the usability of the method overrides. A parameter name in a derived method that differs from the name in the base declaration can cause confusion about whether the method is an override of the base method or a new overload of the method.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1725",
        "messageFormat": "In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1801",
        "title": "Review unused parameters",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "Avoid unused paramereters in your code. If the parameter cannot be removed, then change its name so it starts with an underscore and is optionally followed by an integer, such as '_', '_1', '_2', etc. These are treated as special discard symbol names.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1801",
        "messageFormat": "Parameter {0} of method {1} is never used. Remove the parameter or use it in the method body.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1802",
        "title": "Use literals where appropriate",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "A field is declared static and read-only (Shared and ReadOnly in Visual Basic), and is initialized by using a value that is computable at compile time. Because the value that is assigned to the targeted field is computable at compile time, change the declaration to a const (Const in Visual Basic) field so that the value is computed at compile time instead of at run?time.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1802",
        "messageFormat": "Field '{0}' is declared as 'readonly' but is initialized with a constant value. Mark this field as 'const' instead.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1802",
        "title": "Use literals where appropriate",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "A field is declared static and read-only (Shared and ReadOnly in Visual Basic), and is initialized by using a value that is computable at compile time. Because the value that is assigned to the targeted field is computable at compile time, change the declaration to a const (Const in Visual Basic) field so that the value is computed at compile time instead of at run?time.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1802",
        "messageFormat": "Field '{0}' is declared as 'readonly' but is initialized with an empty string (\"\"). Mark this field as 'const' instead.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1805",
        "title": "Do not initialize unnecessarily",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "The .NET runtime initializes all fields of reference types to their default values before running the constructor. In most cases, explicitly initializing a field to its default value in a constructor is redundant, adding maintenance costs and potentially degrading performance (such as with increased assembly size), and the explicit initialization can be removed.  In some cases, such as with static readonly fields that permanently retain their default value, consider instead changing them to be constants or properties.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1805",
        "messageFormat": "Member '{0}' is explicitly initialized to its default value",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1806",
        "title": "Do not ignore method results",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "A new object is created but never used; or a method that creates and returns a new string is called and the new string is never used; or a COM or P/Invoke method returns an HRESULT or error code that is never used.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1806",
        "messageFormat": "{0} creates a new instance of {1} which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1806",
        "title": "Do not ignore method results",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "A new object is created but never used; or a method that creates and returns a new string is called and the new string is never used; or a COM or P/Invoke method returns an HRESULT or error code that is never used.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1806",
        "messageFormat": "{0} calls {1} but does not use the new string instance that the method returns. Pass the instance as an argument to another method, assign the instance to a variable, or remove the call if it is unnecessary.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1806",
        "title": "Do not ignore method results",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "A new object is created but never used; or a method that creates and returns a new string is called and the new string is never used; or a COM or P/Invoke method returns an HRESULT or error code that is never used.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1806",
        "messageFormat": "{0} calls {1} but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1806",
        "title": "Do not ignore method results",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "A new object is created but never used; or a method that creates and returns a new string is called and the new string is never used; or a COM or P/Invoke method returns an HRESULT or error code that is never used.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1806",
        "messageFormat": "{0} calls {1} but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1806",
        "title": "Do not ignore method results",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "A new object is created but never used; or a method that creates and returns a new string is called and the new string is never used; or a COM or P/Invoke method returns an HRESULT or error code that is never used.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1806",
        "messageFormat": "{0} calls {1} but does not use the value the method returns. Because {1} is marked as a Pure method, it cannot have side effects. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1812",
        "title": "Avoid uninstantiated internal classes",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "An instance of an assembly-level type is not created by code in the assembly.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1812",
        "messageFormat": "{0} is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static members, make it static (Shared in Visual Basic).",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode",
          "CompilationEnd"
        ]
      },
      {
        "id": "CA1814",
        "title": "Prefer jagged arrays over multidimensional",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "A jagged array is an array whose elements are arrays. The arrays that make up the elements can be of different sizes, leading to less wasted space for some sets of data.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1814",
        "messageFormat": "{0} is a multidimensional array. Replace it with a jagged array if possible.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1814",
        "title": "Prefer jagged arrays over multidimensional",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "A jagged array is an array whose elements are arrays. The arrays that make up the elements can be of different sizes, leading to less wasted space for some sets of data.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1814",
        "messageFormat": "{0} returns a multidimensional array of {1}. Replace it with a jagged array if possible.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1814",
        "title": "Prefer jagged arrays over multidimensional",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "A jagged array is an array whose elements are arrays. The arrays that make up the elements can be of different sizes, leading to less wasted space for some sets of data.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1814",
        "messageFormat": "{0} uses a multidimensional array of {1}. Replace it with a jagged array if possible.",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1815",
        "title": "Override equals and operator equals on value types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "For value types, the inherited implementation of Equals uses the Reflection library and compares the contents of all fields. Reflection is computationally expensive, and comparing every field for equality might be unnecessary. If you expect users to compare or sort instances, or to use instances as hash table keys, your value type should implement Equals.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1815",
        "messageFormat": "{0} should override Equals",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1815",
        "title": "Override equals and operator equals on value types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "For value types, the inherited implementation of Equals uses the Reflection library and compares the contents of all fields. Reflection is computationally expensive, and comparing every field for equality might be unnecessary. If you expect users to compare or sort instances, or to use instances as hash table keys, your value type should implement Equals.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1815",
        "messageFormat": "{0} should override the equality (==) and inequality (!=) operators",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1819",
        "title": "Properties should not return arrays",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "Arrays that are returned by properties are not write-protected, even when the property is read-only. To keep the array tamper-proof, the property must return a copy of the array. Typically, users will not understand the adverse performance implications of calling such a property.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1819",
        "messageFormat": "Properties should not return arrays",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1821",
        "title": "Remove empty Finalizers",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "Finalizers should be avoided where possible, to avoid the additional performance overhead involved in tracking object lifetime.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1821",
        "messageFormat": "Remove empty Finalizers",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1822",
        "title": "Mark members as static",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "Members that do not access instance data or call instance methods can be marked as static. After you mark the methods as static, the compiler will emit nonvirtual call sites to these members. This can give you a measurable performance gain for performance-sensitive code.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1822",
        "messageFormat": "Member '{0}' does not access instance data and can be marked as static",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA1823",
        "title": "Avoid unused private fields",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Performance",
        "description": "Private fields were detected that do not appear to be accessed in the assembly.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1823",
        "messageFormat": "Unused field '{0}'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2007",
        "title": "Consider calling ConfigureAwait on the awaited task",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "When an asynchronous method awaits a Task directly, continuation occurs in the same thread that created the task. Consider calling Task.ConfigureAwait(Boolean) to signal your intention for continuation. Call ConfigureAwait(false) on the task to schedule continuations to the thread pool, thereby avoiding a deadlock on the UI thread. Passing false is a good option for app-independent libraries. Calling ConfigureAwait(true) on the task has the same behavior as not explicitly calling ConfigureAwait. By explicitly calling this method, you're letting readers know you intentionally want to perform the continuation on the original synchronization context.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2007",
        "messageFormat": "Consider calling ConfigureAwait on the awaited task",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2011",
        "title": "Avoid infinite recursion",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2011",
        "messageFormat": "Do not assign the property within its setter. This call will result in an infinite recursion.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2011",
        "title": "Avoid infinite recursion",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2011",
        "messageFormat": "Do not assign the property within its setter. This call might result in an infinite recursion.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2109",
        "title": "Review visible event handlers",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Security",
        "description": "A public or protected event-handling method was detected. Event-handling methods should not be exposed unless absolutely necessary.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2109",
        "messageFormat": "Consider making '{0}' not externally visible",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2119",
        "title": "Seal methods that satisfy private interfaces",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "An inheritable public type provides an overridable method implementation of an internal (Friend in Visual Basic) interface. To fix a violation of this rule, prevent the method from being overridden outside the assembly.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2119",
        "messageFormat": "Seal methods that satisfy private interfaces",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2200",
        "title": "Rethrow to preserve stack details",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2200",
        "messageFormat": "Re-throwing caught exception changes stack information",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2211",
        "title": "Non-constant fields should not be visible",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "Static fields that are neither constants nor read-only are not thread-safe. Access to such a field must be carefully controlled and requires advanced programming techniques to synchronize access to the class object.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2211",
        "messageFormat": "Non-constant fields should not be visible",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2214",
        "title": "Do not call overridable methods in constructors",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2214",
        "messageFormat": "Do not call overridable methods in constructors",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2217",
        "title": "Do not mark enums with FlagsAttribute",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Usage",
        "description": "An externally visible enumeration is marked by using FlagsAttribute, and it has one or more values that are not powers of two or a combination of the other defined values on the enumeration.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2217",
        "messageFormat": "Do not mark enums with FlagsAttribute",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2219",
        "title": "Do not raise exceptions in finally clauses",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "When an exception is raised in a finally clause, the new exception hides the active exception. This makes the original error difficult to detect and debug.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2219",
        "messageFormat": "Do not raise an exception from within a finally clause",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2225",
        "title": "Operator overloads have named alternates",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "An operator overload was detected, and the expected named alternative method was not found. The named alternative member provides access to the same functionality as the operator and is provided for developers who program in languages that do not support overloaded operators.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2225",
        "messageFormat": "Provide a method named '{0}' as a friendly alternate for operator {1}",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2225",
        "title": "Operator overloads have named alternates",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "An operator overload was detected, and the expected named alternative method was not found. The named alternative member provides access to the same functionality as the operator and is provided for developers who program in languages that do not support overloaded operators.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2225",
        "messageFormat": "Provide a property named '{0}' as a friendly alternate for operator {1}",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2225",
        "title": "Operator overloads have named alternates",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "An operator overload was detected, and the expected named alternative method was not found. The named alternative member provides access to the same functionality as the operator and is provided for developers who program in languages that do not support overloaded operators.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2225",
        "messageFormat": "Provide a method named '{0}' or '{1}' as an alternate for operator {2}",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2225",
        "title": "Operator overloads have named alternates",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "An operator overload was detected, and the expected named alternative method was not found. The named alternative member provides access to the same functionality as the operator and is provided for developers who program in languages that do not support overloaded operators.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2225",
        "messageFormat": "Mark {0} as public because it is a friendly alternate for operator {1}",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2226",
        "title": "Operators should have symmetrical overloads",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "A type implements the equality or inequality operator and does not implement the opposite operator.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2226",
        "messageFormat": "Since '{0}' redefines operator '{1}', it should also redefine operator '{2}'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2227",
        "title": "Collection properties should be read only",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "A writable collection property allows a user to replace the collection with a different collection. A read-only property stops the collection from being replaced but still allows the individual members to be set.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2227",
        "messageFormat": "Change '{0}' to be read-only by removing the property setter",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2231",
        "title": "Overload operator equals on overriding value type Equals",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "In most programming languages there is no default implementation of the equality operator (==) for value types. If your programming language supports operator overloads, you should consider implementing the equality operator. Its behavior should be identical to that of Equals.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2231",
        "messageFormat": "Implement the equality operators and make their behavior identical to that of 'Equals' method",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2234",
        "title": "Pass system uri objects instead of strings",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "A call is made to a method that has a string parameter whose name contains \"uri\", \"URI\", \"urn\", \"URN\", \"url\", or \"URL\". The declaring type of the method contains a corresponding method overload that has a System.Uri parameter.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2234",
        "messageFormat": "Modify '{0}' to call '{1}' instead of '{2}'",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2244",
        "title": "Do not duplicate indexed element initializations",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "Indexed elements in objects initializers must initialize unique elements. A duplicate index might overwrite a previous element initialization.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2244",
        "messageFormat": "Redundant element initialization at index '{0}'. Object initializer has another element initializer with the same index that overwrites this value.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2245",
        "title": "Do not assign a property to itself",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2245",
        "messageFormat": "The property {0} should not be assigned to itself",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2246",
        "title": "Assigning symbol and its member in the same statement",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Usage",
        "description": "Assigning to a symbol and its member (field/property) in the same statement is not recommended. It is not clear if the member access was intended to use symbol's old value prior to the assignment or new value from the assignment in this statement. For clarity, consider splitting the assignments into separate statements.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2246",
        "messageFormat": "Symbol '{0}' and its member '{1}' are both assigned in the same statement. You are at risk of assigning the member of an unintended object.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA9998",
        "title": "Analyzer package has been deprecated",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/visualstudio/code-quality/migrate-from-fxcop-analyzers-to-net-analyzers",
        "messageFormat": "FxCopAnalyzers package has been deprecated in favor of 'Microsoft.CodeAnalysis.NetAnalyzers', that ships with the .NET SDK. Please refer to https://docs.microsoft.com/visualstudio/code-quality/migrate-from-fxcop-analyzers-to-net-analyzers to migrate to .NET analyzers.",
        "customTags": []
      }
    ]
  },
  {
    "id": "Microsoft.NetFramework.Analyzers",
    "version": "3.3.2",
    "description": "Microsoft recommended API usage rules for APIs specific to the full .NetFramework which are not present in .NetCore, implemented as analyzers using the .NET Compiler Platform (Roslyn). This package is included as a part of Microsoft.CodeAnalysis.FxCopAnalyzers NuGet package and does not need to be installed separately.",
    "diagnostics": [
      {
        "id": "CA1058",
        "title": "Types should not extend certain base types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Design",
        "description": "An externally visible type extends certain base types. Use one of the alternatives.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1058",
        "messageFormat": "{0}",
        "customTags": [
          "PortedFromFxCop",
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA2153",
        "title": "Do Not Catch Corrupted State Exceptions",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Catching corrupted state exceptions could mask errors (such as access violations), resulting in inconsistent state of execution or making it easier for attackers to compromise system. Instead, catch and handle a more specific set of exception type(s) or re-throw the exception.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2153",
        "messageFormat": "{0} is catching corrupted state exception",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3075",
        "title": "Insecure DTD processing in XML",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Using XmlTextReader.Load(), creating an insecure XmlReaderSettings instance when invoking XmlReader.Create(), setting the InnerXml property of the XmlDocument and enabling DTD processing using XmlUrlResolver insecurely can lead to information disclosure. Replace it with a call to the Load() method overload that takes an XmlReader instance, use XmlReader.Create() to accept XmlReaderSettings arguments or consider explicitly setting secure values. The DataViewSettingCollectionString property of DataViewManager should always be assigned from a trusted source, the DtdProcessing property should be set to false, and the XmlResolver property should be changed to XmlSecureResolver or null. ",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3075",
        "messageFormat": "An XmlDocument instance is created without setting its XmlResolver property to a secure value.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3075",
        "title": "Insecure DTD processing in XML",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Using XmlTextReader.Load(), creating an insecure XmlReaderSettings instance when invoking XmlReader.Create(), setting the InnerXml property of the XmlDocument and enabling DTD processing using XmlUrlResolver insecurely can lead to information disclosure. Replace it with a call to the Load() method overload that takes an XmlReader instance, use XmlReader.Create() to accept XmlReaderSettings arguments or consider explicitly setting secure values. The DataViewSettingCollectionString property of DataViewManager should always be assigned from a trusted source, the DtdProcessing property should be set to false, and the XmlResolver property should be changed to XmlSecureResolver or null. ",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3075",
        "messageFormat": "XmlTextReader instance created with insecure default settings.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3075",
        "title": "Insecure DTD processing in XML",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Using XmlTextReader.Load(), creating an insecure XmlReaderSettings instance when invoking XmlReader.Create(), setting the InnerXml property of the XmlDocument and enabling DTD processing using XmlUrlResolver insecurely can lead to information disclosure. Replace it with a call to the Load() method overload that takes an XmlReader instance, use XmlReader.Create() to accept XmlReaderSettings arguments or consider explicitly setting secure values. The DataViewSettingCollectionString property of DataViewManager should always be assigned from a trusted source, the DtdProcessing property should be set to false, and the XmlResolver property should be changed to XmlSecureResolver or null. ",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3075",
        "messageFormat": "Unsafe overload of '{0}' method",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3075",
        "title": "Insecure DTD processing in XML",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Using XmlTextReader.Load(), creating an insecure XmlReaderSettings instance when invoking XmlReader.Create(), setting the InnerXml property of the XmlDocument and enabling DTD processing using XmlUrlResolver insecurely can lead to information disclosure. Replace it with a call to the Load() method overload that takes an XmlReader instance, use XmlReader.Create() to accept XmlReaderSettings arguments or consider explicitly setting secure values. The DataViewSettingCollectionString property of DataViewManager should always be assigned from a trusted source, the DtdProcessing property should be set to false, and the XmlResolver property should be changed to XmlSecureResolver or null. ",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3075",
        "messageFormat": "An insecure overload of XmlReader.Create which does not accept an XmlReaderSettings argument.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3075",
        "title": "Insecure DTD processing in XML",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Using XmlTextReader.Load(), creating an insecure XmlReaderSettings instance when invoking XmlReader.Create(), setting the InnerXml property of the XmlDocument and enabling DTD processing using XmlUrlResolver insecurely can lead to information disclosure. Replace it with a call to the Load() method overload that takes an XmlReader instance, use XmlReader.Create() to accept XmlReaderSettings arguments or consider explicitly setting secure values. The DataViewSettingCollectionString property of DataViewManager should always be assigned from a trusted source, the DtdProcessing property should be set to false, and the XmlResolver property should be changed to XmlSecureResolver or null. ",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3075",
        "messageFormat": "A potentially insecure XmlReaderSettings instance is provided to XmlReader.Create method.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3075",
        "title": "Insecure DTD processing in XML",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Using XmlTextReader.Load(), creating an insecure XmlReaderSettings instance when invoking XmlReader.Create(), setting the InnerXml property of the XmlDocument and enabling DTD processing using XmlUrlResolver insecurely can lead to information disclosure. Replace it with a call to the Load() method overload that takes an XmlReader instance, use XmlReader.Create() to accept XmlReaderSettings arguments or consider explicitly setting secure values. The DataViewSettingCollectionString property of DataViewManager should always be assigned from a trusted source, the DtdProcessing property should be set to false, and the XmlResolver property should be changed to XmlSecureResolver or null. ",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3075",
        "messageFormat": "An insecure XmlReaderSettings instance is provided to XmlReader.Create method.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3075",
        "title": "Insecure DTD processing in XML",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Using XmlTextReader.Load(), creating an insecure XmlReaderSettings instance when invoking XmlReader.Create(), setting the InnerXml property of the XmlDocument and enabling DTD processing using XmlUrlResolver insecurely can lead to information disclosure. Replace it with a call to the Load() method overload that takes an XmlReader instance, use XmlReader.Create() to accept XmlReaderSettings arguments or consider explicitly setting secure values. The DataViewSettingCollectionString property of DataViewManager should always be assigned from a trusted source, the DtdProcessing property should be set to false, and the XmlResolver property should be changed to XmlSecureResolver or null. ",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3075",
        "messageFormat": "XmlTextReader instance is set with insecure values.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3075",
        "title": "Insecure DTD processing in XML",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Using XmlTextReader.Load(), creating an insecure XmlReaderSettings instance when invoking XmlReader.Create(), setting the InnerXml property of the XmlDocument and enabling DTD processing using XmlUrlResolver insecurely can lead to information disclosure. Replace it with a call to the Load() method overload that takes an XmlReader instance, use XmlReader.Create() to accept XmlReaderSettings arguments or consider explicitly setting secure values. The DataViewSettingCollectionString property of DataViewManager should always be assigned from a trusted source, the DtdProcessing property should be set to false, and the XmlResolver property should be changed to XmlSecureResolver or null. ",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3075",
        "messageFormat": "Uses the unsafe setter of InnerXml property of System.Xml.XmlDocument.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3075",
        "title": "Insecure DTD processing in XML",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Using XmlTextReader.Load(), creating an insecure XmlReaderSettings instance when invoking XmlReader.Create(), setting the InnerXml property of the XmlDocument and enabling DTD processing using XmlUrlResolver insecurely can lead to information disclosure. Replace it with a call to the Load() method overload that takes an XmlReader instance, use XmlReader.Create() to accept XmlReaderSettings arguments or consider explicitly setting secure values. The DataViewSettingCollectionString property of DataViewManager should always be assigned from a trusted source, the DtdProcessing property should be set to false, and the XmlResolver property should be changed to XmlSecureResolver or null. ",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3075",
        "messageFormat": "Property in {0} might be set from an untrusted source.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3076",
        "title": "Insecure XSLT script processing.",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Providing an insecure XsltSettings instance and an insecure XmlResolver instance to XslCompiledTransform.Load method is potentially unsafe as it allows processing script within XSL, which on an untrusted XSL input may lead to malicious code execution. Either replace the insecure XsltSettings argument with XsltSettings.Default or an instance that has disabled document function and script execution, or replace the XmlResolver argument with null or an XmlSecureResolver instance. This message may be suppressed if the input is known to be from a trusted source and external resource resolution from locations that are not known in advance must be supported.",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3076",
        "messageFormat": "{0}",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3077",
        "title": "Insecure Processing in API Design, XmlDocument and XmlTextReader",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "Enabling DTD processing on all instances derived from XmlTextReader or  XmlDocument and using XmlUrlResolver for resolving external XML entities may lead to information disclosure. Ensure to set the XmlResolver property to null, create an instance of XmlSecureResolver when processing untrusted input, or use XmlReader.Create method with a secure XmlReaderSettings argument. Unless you need to enable it, ensure the DtdProcessing property is set to false. ",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3077",
        "messageFormat": "{0}",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3147",
        "title": "Mark Verb Handlers With Validate Antiforgery Token",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3147",
        "messageFormat": "HTTP verb attributes attributes are missing on controller action {0}. The ValidateAntiForgeryTokenAttribute will not be used when GET verb is used.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3147",
        "title": "Mark Verb Handlers With Validate Antiforgery Token",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3147",
        "messageFormat": "Missing ValidateAntiForgeryTokenAttribute on MVC controller action {0} which by default accepts POST requests",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3147",
        "title": "Mark Verb Handlers With Validate Antiforgery Token",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3147",
        "messageFormat": "Using HttpVerbs.GET and ValidateAntiForgeryTokenAttribute is not supported by MVC on controller action {0}",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3147",
        "title": "Mark Verb Handlers With Validate Antiforgery Token",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3147",
        "messageFormat": "The ValidateAntiForgeryAttribute is defined with HttpVerbs.Get and at least one of HttpVerbs.Post, HttpVerbs.Put, HttpVerbs.Delete, or HttpVerbs.Patch on controller action {0}. The attribute will not be used when GET verb is used.",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA3147",
        "title": "Mark Verb Handlers With Validate Antiforgery Token",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Security",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca3147",
        "messageFormat": "Missing ValidateAntiForgeryTokenAttribute on controller action {0}",
        "customTags": [
          "Telemetry",
          "EnabledRuleInAggressiveMode"
        ]
      },
      {
        "id": "CA9998",
        "title": "Analyzer package has been deprecated",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Reliability",
        "description": "",
        "helpLinkUri": "https://docs.microsoft.com/visualstudio/code-quality/migrate-from-fxcop-analyzers-to-net-analyzers",
        "messageFormat": "FxCopAnalyzers package has been deprecated in favor of 'Microsoft.CodeAnalysis.NetAnalyzers', that ships with the .NET SDK. Please refer to https://docs.microsoft.com/visualstudio/code-quality/migrate-from-fxcop-analyzers-to-net-analyzers to migrate to .NET analyzers.",
        "customTags": []
      }
    ]
  },
  {
    "id": "Microsoft.CodeAnalysis.FxCopAnalyzers",
    "version": "3.3.2",
    "description": "Microsoft recommended code quality rules and .NET API usage rules, including the most important FxCop rules, implemented as analyzers using the .NET Compiler Platform (Roslyn). These analyzers check your code for security, performance, and design issues, among others. The documentation for FxCop analyzers can be found at https://docs.microsoft.com/visualstudio/code-quality/install-fxcop-analyzers",
    "diagnostics": []
  }
]