[
  {
    "id": "SonarAnalyzer.CSharp",
    "version": "8.16.0.25740",
    "description": "Roslyn analyzers that spot Bugs, Vulnerabilities and Code Smells in your code. For an even better overall experience, you can use SonarLint for Visual Studio, which is a free extension (https://www.sonarlint.org/visualstudio/) that can be used standalone or with SonarQube (https://www.sonarqube.org/) and/or SonarCloud (https://sonarcloud.io/).",
    "diagnostics": [
      {
        "id": "S100",
        "title": "Methods and properties should be named in PascalCase",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Shared naming conventions allow teams to collaborate efficiently. This rule checks whether or not method and property names are PascalCased. To reduce noise, two consecutive upper case characters are allowed unless they form the whole name. So, MyXMethod is compliant, but XM on its own is not.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-100",
        "messageFormat": "Rename {0} '{1}' to match pascal case naming rules, {2}.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1006",
        "title": "Method overrides should not change parameter defaults",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "Default arguments are determined by the static type of the object. If a default argument is different for a parameter in an overriding method, the value used in the call will be different when calls are made via the base or derived object, which may be contrary to developer expectations.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1006",
        "messageFormat": "{0} the default parameter value {1}.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S101",
        "title": "Types should be named in PascalCase",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Shared naming conventions allow teams to collaborate efficiently. This rule checks whether or not type names are using PascalCase. To reduce noise, two consecutive upper case characters are allowed unless they form the whole type name. So, MyXClass is compliant, but XC on its own is not.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-101",
        "messageFormat": "Rename {0} '{1}' to match pascal case naming rules, {2}.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S103",
        "title": "Lines should not be too long",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-103",
        "messageFormat": "Split this {1} characters long line (which is greater than {0} authorized).",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S104",
        "title": "Files should not have too many lines of code",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those smaller files will not only be easier to understand but also probably easier to test.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-104",
        "messageFormat": "This file has {1} lines, which is greater than {0} authorized. Split it into smaller files.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1048",
        "title": "Destructors should not throw exceptions",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Bug",
        "description": "If Finalize or an override of Finalize throws an exception, and the runtime is not hosted by an application that overrides the default policy, the runtime terminates the process immediately without graceful cleanup (finally blocks and finalizers are not executed). This behavior ensures process integrity if the finalizer cannot free or destroy resources.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1048",
        "messageFormat": "Remove this 'throw' statement.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S105",
        "title": "Tabulation characters should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Developers should not need to configure the tab width of their text editors in order to be able to read source code.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-105",
        "messageFormat": "Replace all tab characters in this file by sequences of white-spaces.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S106",
        "title": "Standard outputs should not be used directly to log anything",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "When logging a message there are several important requirements which must be fulfilled:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-106",
        "messageFormat": "Remove this logging statement.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1066",
        "title": "Collapsible \"if\" statements should be merged",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Merging collapsible if statements increases the code's readability.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1066",
        "messageFormat": "Merge this if statement with the enclosing one.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1067",
        "title": "Expressions should not be too complex",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "The complexity of an expression is defined by the number of &&, || and condition ? ifTrue : ifFalse operators it contains.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1067",
        "messageFormat": "Reduce the number of conditional operators ({1}) used in the expression (maximum allowed {0}).",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S107",
        "title": "Methods should not have too many parameters",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-107",
        "messageFormat": "{0} has {1} parameters, which is greater than the {2} authorized.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1075",
        "title": "URIs should not be hardcoded",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Hardcoding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems usually differ from the development environment, ...etc. For all those reasons, a URI should never be hardcoded. Instead, it should be replaced by customizable parameter.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1075",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S108",
        "title": "Nested blocks of code should not be left empty",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-108",
        "messageFormat": "Either remove or fill this block of code.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S109",
        "title": "Magic numbers should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the number of iterations of a loop, to test the value of a property, etc.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-109",
        "messageFormat": "Assign this magic number '{0}' to a well-named (variable|constant), and use the (variable|constant) instead.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S110",
        "title": "Inheritance tree of classes should not be too deep",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by creating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating a deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object oriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-110",
        "messageFormat": "This class has {0} parents which is greater than {1} authorized.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1104",
        "title": "Fields should not have public accessibility",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Public fields in public classes do not respect the encapsulation principle and has three main disadvantages:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1104",
        "messageFormat": "Make this field 'private' and encapsulate it in a 'public' property.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1109",
        "title": "A close curly brace should be located at the beginning of a line",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the beginning of a line.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1109",
        "messageFormat": "Move this closing curly brace to the next line.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1110",
        "title": "Redundant pairs of parentheses should be removed",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But redundant pairs of parentheses could be misleading, and should be removed. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1110",
        "messageFormat": "Remove these redundant parentheses.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1116",
        "title": "Empty statements should be removed",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Empty statements, i.e. ;, are usually introduced by mistake, for example because:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1116",
        "messageFormat": "Remove this empty statement.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1117",
        "title": "Local variables should not shadow class fields",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Overriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of code. Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1117",
        "messageFormat": "Rename '{0}' which hides the {1} with the same name.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1118",
        "title": "Utility classes should not have public constructors",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Utility classes, which are collections of static members, are not meant to be instantiated.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1118",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S112",
        "title": "General exceptions should never be thrown",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Throwing such general exceptions as Exception, SystemException, ApplicationException, IndexOutOfRangeException, NullReferenceException, OutOfMemoryException and ExecutionEngineException prevents calling methods from handling true, system-generated exceptions differently than application-generated errors. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-112",
        "messageFormat": "'{0}' should not be thrown by user code.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1121",
        "title": "Assignments should not be made from within sub-expressions",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have side-effects.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1121",
        "messageFormat": "Extract the assignment of '{0}' from this expression.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1123",
        "title": "\"Obsolete\" attributes should include explanations",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "The Obsolete attribute can be applied with or without arguments, but marking something Obsolete without including advice as to why it's obsolete or on what to use instead will lead maintainers to waste time trying to figure those things out - every single time the warning is encountered.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1123",
        "messageFormat": "Add an explanation.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1125",
        "title": "Boolean literals should not be redundant",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Redundant Boolean literals should be removed from expressions to improve readability.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1125",
        "messageFormat": "Remove the unnecessary Boolean literal(s).",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1128",
        "title": "Unused \"using\" should be removed",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Although unnecessary using won't change anything to the produced application, removing them:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1128",
        "messageFormat": "Remove this unnecessary 'using'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S113",
        "title": "Files should contain an empty newline at the end",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Some tools work better when files end with an empty line.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-113",
        "messageFormat": "Add a new line at the end of the file '{0}'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1134",
        "title": "Track uses of \"FIXME\" tags",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "FIXME tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1134",
        "messageFormat": "Take the required action to fix the issue indicated by this 'FIXME' comment.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1135",
        "title": "Track uses of \"TODO\" tags",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Info Code Smell",
        "description": "TODO tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1135",
        "messageFormat": "Complete the task associated to this 'TODO' comment.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1144",
        "title": "Unused private types or members should be removed",
        "defaultSeverity": "Info",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "private or internal types or private members that are never executed or referenced are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1144",
        "messageFormat": "Remove the unused {0} {1} '{2}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope",
          "Unnecessary"
        ]
      },
      {
        "id": "S1145",
        "title": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Bug",
        "description": "if statements with conditions that are always false have the effect of making blocks of code non-functional. if statements with conditions that are always true are completely redundant, and make the code less readable.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1145",
        "messageFormat": "Remove this useless {0}.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1147",
        "title": "Exit methods should not be called",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Blocker Code Smell",
        "description": "Calling Environment.Exit(exitCode) or Application.Exit() terminates the process and returns an exit code to the operating system..",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1147",
        "messageFormat": "Remove this call to '{0}' or ensure it is really required.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1151",
        "title": "\"switch case\" clauses should not have too many lines of code",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "The switch statement should be used only to clearly define some new branches in the control flow. As soon as a case clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the case clause should be extracted into a dedicated method.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1151",
        "messageFormat": "Reduce this {0} number of statements from {1} to at most {2}, for example by extracting code into a {3}.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1155",
        "title": "\"Any()\" should be used to test for emptiness",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Using .Count() to test for emptiness works, but using .Any() makes the intent clearer, and the code more readable. However, there are some cases where special attention should be paid:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1155",
        "messageFormat": "Use '.Any()' to test whether this 'IEnumerable<{0}>' is empty or not.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1163",
        "title": "Exceptions should not be thrown in finally blocks",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "Throwing an exception from within a finally block will mask any exception which was previously thrown in the try or catch block, and the masked's exception message and stack trace will be lost.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1163",
        "messageFormat": "Refactor this code to not throw exceptions in finally blocks.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1168",
        "title": "Empty arrays and collections should be returned instead of null",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Returning null instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more complex and less readable.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1168",
        "messageFormat": "Return an empty collection instead of null.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1172",
        "title": "Unused method parameters should be removed",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1172",
        "messageFormat": "Remove this {0}.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1185",
        "title": "Overriding members should do more than simply call the same member in the base class",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Overriding a method just to call the same method from the base class without performing any other actions is useless and misleading. The only time this is justified is in sealed overriding methods, where the effect is to lock in the parent class behavior. This rule ignores overrides of Equals and GetHashCode.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1185",
        "messageFormat": "Remove this {1} '{0}' to simply inherit its behavior.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1186",
        "title": "Methods should not be empty",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "There are several reasons for a method not to have a method body:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1186",
        "messageFormat": "Add a nested comment explaining why this method is empty, throw a 'NotSupportedException' or complete the implementation.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1192",
        "title": "String literals should not be duplicated",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1192",
        "messageFormat": "Define a constant instead of using this literal '{0}' {1} times.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1199",
        "title": "Nested code blocks should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method typically indicates that the method has too many responsibilities, and should be refactored into smaller methods.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1199",
        "messageFormat": "Extract this nested code block into a separate method.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1200",
        "title": "Classes should not be coupled to too many other classes (Single Responsibility Principle)",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should have only one responsibility:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1200",
        "messageFormat": "Split this {0} into smaller and more specialized ones to reduce its dependencies on other classes from {1} to the maximum authorized {2} or less.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1206",
        "title": "\"Equals(Object)\" and \"GetHashCode()\" should be overridden in pairs",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Bug",
        "description": "There is a contract between Equals(object) and GetHashCode(): If two objects are equal according to the Equals(object) method, then calling GetHashCode() on each of them must yield the same result. If this is not the case, many collections won't handle class instances correctly.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1206",
        "messageFormat": "This {0} overrides '{1}' and should therefore also override '{2}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S121",
        "title": "Control structures should use curly braces",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-121",
        "messageFormat": "Add curly braces around the nested statement(s) in this '{0}' block.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1210",
        "title": "\"Equals\" and the comparison operators should be overridden when implementing \"IComparable\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "When you implement IComparable or IComparable<T> on a class you should also override Equals(object) and overload the comparison operators (==, !=, <, <=, >, >=). That's because the CLR cannot automatically call your CompareTo implementation from Equals(object) or from the base comparison operator implementations. Additionally, it is best practice to override GetHashCode along with Equals.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1210",
        "messageFormat": "When implementing {0}, you should also override {1}.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1215",
        "title": "\"GC.Collect\" should not be called",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "Calling GC.Collect is rarely necessary, and can significantly affect application performance. That's because it triggers a blocking operation that examines every object in memory for cleanup. Further, you don't have control over when this blocking cleanup will actually run.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1215",
        "messageFormat": "Refactor the code to remove this use of '{0}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S122",
        "title": "Statements should be on separate lines",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "For better readability, do not put more than one statement on a single line.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-122",
        "messageFormat": "Reformat the code to have only one statement per line.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1226",
        "title": "Method parameters, caught exceptions and foreach variables' initial values should not be ignored",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Bug",
        "description": "While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug. Instead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as final, then at least read before reassignment.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1226",
        "messageFormat": "Introduce a new variable instead of reusing the parameter '{0}'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1227",
        "title": "break statements should not be used except for switch cases",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "break; is an unstructured control flow statement which makes code harder to read.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1227",
        "messageFormat": "Refactor the code in order to remove this break statement.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1244",
        "title": "Floating point numbers should not be tested for equality",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Bug",
        "description": "Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is not associative; push a float or a double through a series of simple mathematical operations and the answer will be different based on the order of those operation because of the rounding that takes place at each step.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1244",
        "messageFormat": "Do not check floating point {0} with exact values, use a range instead.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S125",
        "title": "Sections of code should not be commented out",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Programmers should not comment out code as it bloats programs and reduces readability.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-125",
        "messageFormat": "Remove this commented out code.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S126",
        "title": "\"if ... else if\" constructs should end with \"else\" clauses",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "This rule applies whenever an if statement is followed by one or more else if statements; the final else if should be followed by an else statement.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-126",
        "messageFormat": "Add the missing 'else' clause.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1264",
        "title": "A \"while\" loop should be used instead of a \"for\" loop",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "When only the condition expression is defined in a for loop, and the initialization and increment expressions are missing, a while loop should be used instead to increase readability. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1264",
        "messageFormat": "Replace this 'for' loop with a 'while' loop.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S127",
        "title": "\"for\" loop stop conditions should be invariant",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "A for loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-127",
        "messageFormat": "Do not update the loop counter '{0}' within the loop body.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1301",
        "title": "\"switch\" statements should have at least 3 \"case\" clauses",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "switch statements and expressions are useful when there are many different cases depending on the value of the same expression.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1301",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1309",
        "title": "Track uses of in-source issue suppressions",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Info Code Smell",
        "description": "This rule allows you to track the usage of the SuppressMessage attributes and #pragma warning disable mechanism.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1309",
        "messageFormat": "Do not suppress issues.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S131",
        "title": "\"switch/Select\" statements should contain a \"default/Case Else\" clauses",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "The requirement for a final default clause is defensive programming. The clause should either take appropriate action, or contain a suitable comment as to why no action is taken. Even when the switch covers all current values of an enum, a default case should still be used because there is no guarantee that the enum won't be extended.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-131",
        "messageFormat": "Add a '{0}' clause to this '{1}' statement.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1313",
        "title": "Using hardcoded IP addresses is security-sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Security Hotspot",
        "description": "Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1313",
        "messageFormat": "Make sure using this hardcoded IP address '{0}' is safe here.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S134",
        "title": "Control flow statements \"if\", \"switch\", \"for\", \"foreach\", \"while\", \"do\"  and \"try\" should not be nested too deeply",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "Nested if, switch, for, foreach, while, do, and try statements are key ingredients for making what's known as \"Spaghetti code\".",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-134",
        "messageFormat": "Refactor this code to not nest more than {0} control flow statements.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S138",
        "title": "Functions should not have too many lines of code",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "A function that grows too large tends to aggregate too many responsibilities.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-138",
        "messageFormat": "This {0} has {1} lines, which is greater than the {2} lines authorized. Split it into smaller {3}.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1449",
        "title": "Culture should be specified for \"string\" operations",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "string.ToLower(), ToUpper, IndexOf, LastIndexOf, and Compare are all culture-dependent, as are some (floating point number and DateTime-related) calls to ToString. Fortunately, all have variants which accept an argument specifying the culture or formatter to use. Leave that argument off and the call will use the system default culture, possibly creating problems with international characters.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1449",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1450",
        "title": "Private fields only used as local variables in methods should become local variables",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class information. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1450",
        "messageFormat": "Remove the field '{0}' and declare it as a local variable in the relevant methods.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1451",
        "title": "Track lack of copyright and license headers",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Blocker Code Smell",
        "description": "Each source file should start with a header stating file ownership and the license which must be used to distribute the application. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1451",
        "messageFormat": "Add or update the header of this file.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1479",
        "title": "\"switch\" statements should not have too many \"case\" clauses",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "When switch statements have large sets of case clauses, it is usually an attempt to map two sets of data. A Dictionary should be used instead to make the code more readable and maintainable.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1479",
        "messageFormat": "Consider reworking this 'switch' to reduce the number of 'case's from {1} to at most {0}.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1481",
        "title": "Unused local variables should be removed",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1481",
        "messageFormat": "Remove the unused local variable '{0}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1541",
        "title": "Methods and properties should not be too complex",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "The cyclomatic complexity of methods and properties should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1541",
        "messageFormat": "The Cyclomatic Complexity of this {2} is {1} which is greater than {0} authorized.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1607",
        "title": "Tests should not be ignored",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why the test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up polluting their projects.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1607",
        "messageFormat": "Either remove this 'Ignore' attribute or add an explanation about why this test is ignored.",
        "customTags": [
          "C#",
          "SonarWay",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1643",
        "title": "Strings should not be concatenated using '+' in a loop",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "StringBuilder is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1643",
        "messageFormat": "Use a StringBuilder instead.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1656",
        "title": "Variables should not be self-assigned",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1656",
        "messageFormat": "Remove or correct this useless self-assignment.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1659",
        "title": "Multiple variables should not be declared on the same line",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Declaring multiple variable on one line is difficult to read.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1659",
        "messageFormat": "Declare '{0}' in a separate statement.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1694",
        "title": "An abstract class should have both abstract and concrete methods",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1694",
        "messageFormat": "Convert this 'abstract' class to {0}.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1696",
        "title": "NullReferenceException should not be caught",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "NullReferenceException should be avoided, not caught. Any situation in which NullReferenceException is explicitly caught can easily be converted to a null test, and any behavior being carried out in the catch block can easily be moved to the \"is null\" branch of the conditional.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1696",
        "messageFormat": "Do not catch NullReferenceException; test for null instead.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1697",
        "title": "Short-circuit logic should be used to prevent null pointer dereferences in conditionals",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Bug",
        "description": "When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced only if it is null, leading to a guaranteed null pointer dereference.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1697",
        "messageFormat": "Either reverse the equality operator in the '{0}' null test, or reverse the logical operator that follows it.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1698",
        "title": "\"==\" should not be used when \"Equals\" is overridden",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Using the equality == and inequality != operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then == resolves to reference equality, which may result in unexpected behavior if implementing classes override Equals. Similarly, when a class overrides Equals, but instances are compared with non-overloaded ==, there is a high chance that value comparison was meant instead of the reference one.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1698",
        "messageFormat": "Consider using 'Equals' if value comparison was intended.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1699",
        "title": "Constructors should only call non-overridable methods",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the method.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1699",
        "messageFormat": "Remove this call from a constructor to the overridable '{0}' method.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1751",
        "title": "Loops with at most one iteration should be refactored",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "A loop with at most one iteration is equivalent to the use of an if statement to conditionally execute one piece of code. If the initial intention of the author was really to conditionally execute one piece of code, an if statement should be used instead. If that was not the initial intention of the author, the body of the loop should be fixed to use the nested return, break or throw statements in a more appropriate way.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1751",
        "messageFormat": "Refactor the containing loop to do more than one iteration.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1764",
        "title": "Identical expressions should not be used on both sides of a binary operator",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1764",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1821",
        "title": "\"switch\" statements should not be nested",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "Nested switch structures are difficult to understand because you can easily confuse the cases of an inner switch as belonging to an outer statement. Therefore nested switch statements should be avoided.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1821",
        "messageFormat": "Refactor the code to eliminate this nested 'switch'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1848",
        "title": "Objects should not be created to be dropped immediately without being used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could lead to an unexpected behavior in production.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1848",
        "messageFormat": "Either remove this useless object instantiation of class '{0}' or use it.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1854",
        "title": "Unused assignments should be removed",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources. Therefore all calculated values should be used.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1854",
        "messageFormat": "Remove this useless assignment to local variable '{0}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1858",
        "title": "\"ToString()\" calls should not be redundant",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. Similarly, explicitly invoking ToString() when the compiler would do it implicitly is also needless code-bloat.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1858",
        "messageFormat": "There's no need to call 'ToString()'{0}.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1862",
        "title": "Related \"if/else if\" statements should not have the same condition",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "A chain of if/else if statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to true. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1862",
        "messageFormat": "This branch duplicates the one on line {0}.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1871",
        "title": "Two branches in a conditional structure should not have exactly the same implementation",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Having two cases in the same switch statement or branches in the same if structure with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an if structure they should be combined, or for a switch, one should fall through to the other.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1871",
        "messageFormat": "Either merge this {1} with the identical one on line {0} or change one of the implementations.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S1905",
        "title": "Redundant casts should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Unnecessary casting expressions make the code harder to read and understand.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1905",
        "messageFormat": "Remove this unnecessary cast to '{0}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1939",
        "title": "Inheritance list should not be redundant",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "An inheritance list entry is redundant if:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1939",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1940",
        "title": "Boolean checks should not be inverted",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1940",
        "messageFormat": "Use the opposite operator ('{0}') instead.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1944",
        "title": "Inappropriate casts should not be made",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "Inappropriate casts are issues that will lead to unexpected behavior or runtime errors, such as InvalidCastExceptions. The compiler will catch bad casts from one class to another, but not bad casts to interfaces. Nor will it catch nullable values that are known to be null but that are cast to their underlying value types anyway.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1944",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1944",
        "title": "Inappropriate casts should not be made",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "Inappropriate casts are issues that will lead to unexpected behavior or runtime errors, such as InvalidCastExceptions. The compiler will catch bad casts from one class to another, but not bad casts to interfaces. Nor will it catch nullable values that are known to be null but that are cast to their underlying value types anyway.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1944",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S1994",
        "title": "\"for\" loop increment clauses should modify the loops' counters",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "It can be extremely confusing when a for loop's counter is incremented outside of its increment clause. In such cases, the increment should be moved to the loop's increment clause if at all possible.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-1994",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2053",
        "title": "Hashes should include an unpredictable salt",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Vulnerability",
        "description": "In cryptography, \"salt\" is extra piece of data which is included in a hashing algorithm. It makes dictionary attacks more difficult. Using a cryptographic hash function without an unpredictable salt increases the likelihood that an attacker will be able to successfully guess a hashed value such as a password with a dictionary attack.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2053",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2068",
        "title": "Hard-coded credentials are security-sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Security Hotspot",
        "description": "Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true for applications that are distributed or that are open-source.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2068",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S2070",
        "title": "SHA-1 and Message-Digest hash algorithms should not be used in secure contexts",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Vulnerability",
        "description": "The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is, it takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash value gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2, MD4, MD6.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2070",
        "messageFormat": "Use a stronger hashing/asymmetric algorithm.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2077",
        "title": "Formatting SQL queries is security-sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Security Hotspot",
        "description": "Formatting strings used as SQL queries is security-sensitive. It has led in the past to the following vulnerabilities:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2077",
        "messageFormat": "Make sure that executing SQL queries is safe here.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S2092",
        "title": "Creating cookies without the \"secure\" flag is security-sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Security Hotspot",
        "description": "When a cookie is protected with the secure attribute set to true it will not be send by the browser over an unencrypted HTTP request and thus cannot be observed by an unauthorized person during a man-in-the-middle attack. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2092",
        "messageFormat": "Make sure creating this cookie without setting the 'Secure' property is safe here.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S2114",
        "title": "Collections should not be passed as arguments to their own methods",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical code. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2114",
        "messageFormat": "Change one instance of '{0}' to a different value; {1}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2123",
        "title": "Values should not be uselessly incremented",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2123",
        "messageFormat": "Remove this {0} or correct the code not to waste it.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2148",
        "title": "Underscores should be used to make large numbers readable",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Beginning with C# 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this manner has no semantic meaning, but makes it easier for maintainers to understand the code.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2148",
        "messageFormat": "Add underscores to this numeric value for readability.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2156",
        "title": "\"sealed\" classes should not have \"protected\" members",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "The difference between private and protected visibility is that child classes can see and use protected members, but they cannot see private ones. Since a sealed class cannot have children, marking its members protected is confusingly pointless.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2156",
        "messageFormat": "Remove this 'protected' modifier.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2178",
        "title": "Short-circuit logic should be used in boolean contexts",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Code Smell",
        "description": "The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are evaluated under the wrong circumstances. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2178",
        "messageFormat": "Correct this '{0}' to '{1}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2183",
        "title": "Integral numbers should not be shifted by zero or more than their number of bits-1",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Bug",
        "description": "Shifting an integral number by 0 is equivalent to doing nothing but makes the code confusing for maintainers.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2183",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2184",
        "title": "Results of integer division should not be assigned to floating point variables",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Bug",
        "description": "When division is performed on ints, the result will always be an int. You can assign that result to a double, float or decimal with automatic type conversion, but having started as an int, the result will likely not be what you expect. If the result of int division is assigned to a floating-point variable, precision will have been lost before the assignment. Instead, at least one operand should be cast or promoted to the final type before the operation takes place.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2184",
        "messageFormat": "Cast one of the operands of this division to '{0}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2187",
        "title": "TestCases should contain tests",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Code Smell",
        "description": "There's no point in having a test class without any test methods.This could lead a maintainer to assume a class is covered by tests even though it is not.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2187",
        "messageFormat": "Add some tests to this class.",
        "customTags": [
          "C#",
          "SonarWay",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2190",
        "title": "Recursion should not be infinite",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Bug",
        "description": "Recursion happens when control enters a loop that has no exit. This can happen a method invokes itself, when a pair of methods invoke each other, or when goto statements are used to move between two segments of code. It can be a useful tool, but unless the method includes a provision to break out of the recursion and return, the recursion will continue until the stack overflows and the program crashes.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2190",
        "messageFormat": "Add a way to break out of this {0}.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2197",
        "title": "Modulus results should not be checked for direct equality",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for equality with a positive number (or a negative one) could result in unexpected results. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2197",
        "messageFormat": "The result of this modulus operation may not be {0}.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2201",
        "title": "Return values from functions without side effects should not be ignored",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either the function call is useless and should be dropped or the source code doesn't behave as expected.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2201",
        "messageFormat": "Use the return value of method '{0}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2219",
        "title": "Runtime type checking should be simplified",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "To check the type of an object there are several options:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2219",
        "messageFormat": "Use {0} instead.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2221",
        "title": "\"Exception\" should not be caught when not required by called methods",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Catching System.Exception seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types, including the ones that were not intended to be caught. To prevent any misunderstandings, the exception filters should be used. Alternatively each exception type should be in a separate catch block.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2221",
        "messageFormat": "Catch a list of specific exception subtype or use exception filters instead.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2223",
        "title": "Non-constant static fields should not be visible",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "A static field that is neither constant nor read-only is not thread-safe. Correctly accessing these fields from different threads needs synchronization with locks. Improper synchronization may lead to unexpected results, thus publicly visible static fields are best suited for storing non-changing data shared by many consumers. To enforce this intent, these fields should be marked readonly or converted to constants.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2223",
        "messageFormat": "Change the visibility of '{0}' or make it 'const' or 'readonly'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2225",
        "title": "\"ToString()\" method should not return null",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "Calling ToString() on an object should always return a string. Returning null instead contravenes the method's implicit contract.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2225",
        "messageFormat": "Return empty string instead.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2228",
        "title": "Console logging should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Vulnerability",
        "description": "Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you run the risk of inadvertently exposing sensitive information.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2228",
        "messageFormat": "Remove this logging statement.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2234",
        "title": "Parameters should be passed in the correct order",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "When the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when the names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead to unexpected results.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2234",
        "messageFormat": "Parameters to '{0}' have the same names but not the same order as the method arguments.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2245",
        "title": "Using pseudorandom number generators (PRNGs) is security-sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Security Hotspot",
        "description": "Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2245",
        "messageFormat": "Make sure that using this pseudorandom number generator is safe here.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S2251",
        "title": "A \"for\" loop update clause should move the counter in the right direction",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "A for loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually reach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2251",
        "messageFormat": "'{0}' is {1}remented and will never reach 'stop condition'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2252",
        "title": "For-loop conditions should be true at least once",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "If a for loop's condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always bugs, particularly when the initial value and stop conditions are hard-coded.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2252",
        "messageFormat": "This loop will never execute.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2255",
        "title": "Writing cookies is security-sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Security Hotspot",
        "description": "Using cookies is security-sensitive. It has led in the past to the following vulnerabilities:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2255",
        "messageFormat": "Make sure that this cookie is written safely.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S2257",
        "title": "Using non-standard cryptographic algorithms is security-sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Security Hotspot",
        "description": "The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Standard algorithms like AES, RSA, SHA, ... should be used instead.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2257",
        "messageFormat": "Make sure using a non-standard cryptographic algorithm is safe here.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S2259",
        "title": "Null pointers should not be dereferenced",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "A reference to null should never be dereferenced/accessed. Doing so will cause a NullReferenceException to be thrown. At best, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or it could allow an attacker to bypass security measures.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2259",
        "messageFormat": "'{0}' is null on at least one execution path.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2275",
        "title": "Composite format strings should not lead to unexpected behavior at runtime",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Bug",
        "description": "Because composite format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that lead to unexpected behaviors or runtime errors. This rule statically validates the good behavior of composite formats when calling the methods of String.Format, StringBuilder.AppendFormat, Console.Write, Console.WriteLine, TextWriter.Write, TextWriter.WriteLine, Debug.WriteLine(String, Object[]), Trace.TraceError(String, Object[]), Trace.TraceInformation(String, Object[]), Trace.TraceWarning(String, Object[]) and TraceSource.TraceInformation(String, Object[]). ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2275",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2278",
        "title": "Neither DES (Data Encryption Standard) nor DESede (3DES) should be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Blocker Vulnerability",
        "description": "According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2278",
        "messageFormat": "Use the recommended AES (Advanced Encryption Standard) instead.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2290",
        "title": "Field-like events should not be virtual",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "Field-like events are events that do not have explicit add and remove methods. The compiler generates a private delegate field to back the event, as well as generating the implicit add and remove methods.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2290",
        "messageFormat": "Remove this 'virtual' modifier of {0}.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2291",
        "title": "Overflow checking should not be disabled for \"Enumerable.Sum\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "Enumerable.Sum() always executes addition in a checked context, so an OverflowException will be thrown if the value exceeds MaxValue even if an unchecked context was specified. Using an unchecked context anyway represents a misunderstanding of how Sum works.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2291",
        "messageFormat": "Refactor this code to handle 'OverflowException'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2292",
        "title": "Trivial properties should be auto-implemented",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Trivial properties, which include no logic but setting and getting a backing field should be converted to auto-implemented properties, yielding cleaner and more readable code.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2292",
        "messageFormat": "Make this an auto-implemented property and remove its backing field.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2302",
        "title": "\"nameof\" should be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "Because parameter names could be changed during refactoring, they should not be spelled out literally in strings. Instead, use nameof(), and the string that's output will always be correct.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2302",
        "messageFormat": "Replace the string '{0}' with 'nameof({0})'.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2306",
        "title": "\"async\" and \"await\" should not be used as identifiers",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Code Smell",
        "description": "Since C# 5.0, async and await are contextual keywords. Contextual keywords do have a particular meaning in some contexts, but can still be used as variable names. Keywords, on the other hand, are always reserved, and therefore are not valid variable names. To avoid any confusion though, it is best to not use async and await as identifiers.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2306",
        "messageFormat": "Rename '{0}' to not use a contextual keyword as an identifier.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2325",
        "title": "Methods and properties that don't access instance data should be static",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Methods and properties that don't access instance data can be static to prevent any misunderstanding about the contract of the method. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2325",
        "messageFormat": "Make '{0}' a static {1}.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2326",
        "title": "Unused type parameters should be removed",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type parameters should be removed.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2326",
        "messageFormat": "'{0}' is not used in the {1}.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2327",
        "title": "\"try\" statements with identical \"catch\" and/or \"finally\" blocks should be merged",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "When multiple, adjacent try statements have duplicate catch and/or finally blocks, they should be merged to consolidate the catch/finally logic for cleaner, more readable code. Note that this applies even when there is intervening code outside any try block.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2327",
        "messageFormat": "Combine this 'try' with the one starting on line {0}.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2328",
        "title": "\"GetHashCode\" should not reference mutable fields",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Bug",
        "description": "GetHashCode is used to file an object in a Dictionary or Hashtable. If GetHashCode uses non-readonly fields and those fields change after the object is stored, the object immediately becomes mis-filed in the Hashtable. Any subsequent test to see if the object is in the Hashtable will return a false negative.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2328",
        "messageFormat": "Refactor 'GetHashCode' to not reference mutable fields.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2330",
        "title": "Array covariance should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "Array covariance is the principle that if an implicit or explicit reference conversion exits from type A to B, then the same conversion exists from the array type A[] to B[].",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2330",
        "messageFormat": "Refactor the code to not rely on potentially unsafe array conversions.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2333",
        "title": "Redundant modifiers should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Unnecessary keywords simply clutter the code and should be removed. Specifically:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2333",
        "messageFormat": "'{0}' is {1} in this context.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2339",
        "title": "Public constant members should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "Constant members are copied at compile time to the call sites, instead of being fetched at runtime.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2339",
        "messageFormat": "Change this constant to a {0} property.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2342",
        "title": "Enumeration types should comply with a naming convention",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Shared naming conventions allow teams to collaborate efficiently. This rule checks that all enum names match a provided regular expression.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2342",
        "messageFormat": "Rename this enumeration to match the regular expression: '{0}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2344",
        "title": "Enumeration type names should not have \"Flags\" or \"Enum\" suffixes",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "The information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2344",
        "messageFormat": "Rename this enumeration to remove the '{0}' suffix.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2345",
        "title": "Flags enumerations should explicitly initialize all their members",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Bug",
        "description": "Flags enumerations should not rely on the language to initialize the values of their members. Implicit initialization will set the first member to 0, and increment the value by one for each subsequent member. This implicit behavior does not allow members to be combined using the bitwise or operator in a useful way.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2345",
        "messageFormat": "Initialize all the members of this 'Flags' enumeration.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2346",
        "title": "Flags enumerations zero-value members should be named \"None\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "Consistent use of \"None\" in flags enumerations indicates that all flag values are cleared. The value 0 should not be used to indicate any other state, since there is no way to check that the bit 0 is set.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2346",
        "messageFormat": "Rename '{0}' to 'None'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2357",
        "title": "Fields should be private",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "Fields should not be part of an API, and therefore should always be private. Indeed, they cannot be added to an interface for instance, and validation cannot be added later on without breaking backward compatibility. Instead, developers should encapsulate their fields into properties. Explicit property getters and setters can be introduced for validation purposes or to smooth the transition to a newer system.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2357",
        "messageFormat": "Make '{0}' private.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2360",
        "title": "Optional parameters should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "The overloading mechanism should be used in place of optional parameters for several reasons:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2360",
        "messageFormat": "Use the overloading mechanism instead of the optional parameters.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2365",
        "title": "Properties should not make collection or array copies",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "Most developers expect property access to be as efficient as field access. However, if a property returns a copy of an array or collection, it will be much slower than simple field access, contrary to the caller's likely expectations. Therefore, such properties should be refactored into methods so that callers are not surprised by the unexpectedly poor performance.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2365",
        "messageFormat": "Refactor '{0}' into a method, properties should not copy collections.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2368",
        "title": "Public methods should not have multidimensional array parameters",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Code Smell",
        "description": "Exposing methods with multidimensional array parameters requires developers to have advanced knowledge about the language in order to be able to use them. Moreover, what exactly to pass to such parameters is not intuitive. Therefore, such methods should not be exposed, but can be used internally.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2368",
        "messageFormat": "Make this method private or simplify its parameters to not use multidimensional arrays.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2372",
        "title": "Exceptions should not be thrown from property getters",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Property getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a method. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2372",
        "messageFormat": "Remove the exception throwing from this property getter, or refactor the property into a method.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2376",
        "title": "Write-only properties should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Properties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or the property should be replaced with a setter method.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2376",
        "messageFormat": "Provide a getter for '{0}' or replace the property with a 'Set{0}' method.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2386",
        "title": "Mutable fields should not be \"public static\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "public static mutable fields of classes which are accessed directly should be protected to the degree possible. This can be done by reducing the accessibility of the field or by changing the return type to an immutable type.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2386",
        "messageFormat": "Use an immutable collection or reduce the accessibility of the field(s) {0}.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2387",
        "title": "Child class fields should not shadow parent class fields",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Blocker Code Smell",
        "description": "Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at best, chaos at worst. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2387",
        "messageFormat": "'{0}' is the name of a field in '{1}'.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2436",
        "title": "Types and methods should not have too many generic parameters",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "A method or class with too many type parameters has likely aggregated too many responsibilities and should be split.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2436",
        "messageFormat": "Reduce the number of generic parameters in the '{0}' {1} to no more than the {2} authorized.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2437",
        "title": "Silly bit operations should not be performed",
        "defaultSeverity": "Info",
        "isEnabledByDefault": true,
        "category": "Blocker Code Smell",
        "description": "Certain bit operations are just silly and should not be performed because their results are predictable.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2437",
        "messageFormat": "Remove this silly bit operation.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope",
          "Unnecessary"
        ]
      },
      {
        "id": "S2479",
        "title": "Whitespace and control characters in string literals should be explicit",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "Non-encoded control characters and whitespace characters are often injected in the source code because of a bad manipulation. They are either invisible or difficult to recognize, which can result in bugs when the string is not what the developer expects. If you actually need to use a control character use their encoded version (ex: ASCII \r\n,\t,... or Unicode U+000D, U+0009,...).",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2479",
        "messageFormat": "Replace the control character at position {0} by its escape sequence '{1}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2486",
        "title": "Generic exceptions should not be ignored",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Vulnerability",
        "description": "When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2486",
        "messageFormat": "Handle the exception or explain in a comment why it can be ignored.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2551",
        "title": "Shared resources should not be used for locking",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Bug",
        "description": "Shared resources should not be used for locking as it increases the chance of deadlocks. Any other thread could acquire (or attempt to acquire) the same lock for another unrelated purpose. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2551",
        "messageFormat": "Lock on a dedicated object instance instead.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2583",
        "title": "Conditionally executed code should be reachable",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "Conditional expressions which are always true or false can lead to dead code. Such code is always buggy and should never be used in production.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2583",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2589",
        "title": "Boolean expressions should not be gratuitous",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous because it does not match the programmer's intent, then it's a bug and the expression should be fixed.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2589",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2674",
        "title": "The length returned from a stream read should be checked",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Bug",
        "description": "You cannot assume that any given stream reading call will fill the byte[] passed in to the method with the number of bytes requested. Instead, you must check the value returned by the read method to see how many bytes were read. Fail to do so, and you introduce a bug that is both harmful and difficult to reproduce.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2674",
        "messageFormat": "Check the return value of the '{0}' call to see how many bytes were read.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2681",
        "title": "Multiline blocks should be enclosed in curly braces",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Curly braces can be omitted from a one-line block, such as with an if statement or for loop, but doing so can be misleading and induce bugs.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2681",
        "messageFormat": "This line will not be executed {0}; only the first line of this {2}-line block will be. The rest will execute {1}.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2688",
        "title": "\"NaN\" should not be used in comparisons",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "NaN is not equal to anything, even itself. Testing for equality or inequality against NaN will yield predictable results, but probably not the ones you want. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2688",
        "messageFormat": "Use {0}.IsNaN() instead.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2692",
        "title": "\"IndexOf\" checks should not be for positive numbers",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "Most checks against an IndexOf value compare it with -1 because 0 is a valid index. Any checks which look for values >0 ignore the first element, which is likely a bug. If the intent is merely to check inclusion of a value in a string, List, or an array, consider using the Contains method instead.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2692",
        "messageFormat": "0 is a valid index, but this check ignores it.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2696",
        "title": "Instance members should not write to \"static\" fields",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "Correctly updating a static field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple class instances and/or multiple threads in play. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2696",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2699",
        "title": "Tests should include assertions",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Code Smell",
        "description": "A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the code under test.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2699",
        "messageFormat": "Add at least one assertion to this test case.",
        "customTags": [
          "C#",
          "SonarWay",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2701",
        "title": "Literal boolean values should not be used in assertions",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "There's no reason to use literal boolean values in assertions. Doing so is at best confusing for maintainers, and at worst a bug.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2701",
        "messageFormat": "Remove or correct this assertion.",
        "customTags": [
          "C#",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2737",
        "title": "\"catch\" clauses should do more than rethrow",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "A catch clause that only rethrows the caught exception has the same effect as omitting the catch altogether and letting it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2737",
        "messageFormat": "Add logic to this catch clause or eliminate it and rethrow the exception automatically.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2743",
        "title": "Static fields should not be used in generic types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "A static field in a generic type is not shared among instances of different closed constructed types, thus LengthLimitedSingletonCollection<int>.instances and LengthLimitedSingletonCollection<string>.instances will point to different objects, even though instances is seemingly shared among all LengthLimitedSingletonCollection<> generic classes.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2743",
        "messageFormat": "A static field in a generic type is not shared among instances of different close constructed types.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2755",
        "title": "XML parsers should not be vulnerable to XXE attacks",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Vulnerability",
        "description": "XML specification allows the use of entities that can be internal or external (file system / network access ...) which could lead to vulnerabilities such as confidential file disclosures or SSRFs.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2755",
        "messageFormat": "Disable access to external entities in XML parsing.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2757",
        "title": "\"=+\" should not be used instead of \"+=\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "The use of operators pairs ( =+, =- or =! ) where the reversed, single operator was meant (+=, -= or !=) will compile and run, but not produce the expected results.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2757",
        "messageFormat": "Was '{0}' meant instead?",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2758",
        "title": "The ternary operator should not return the same value regardless of the condition",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "When the second and third operands of a ternary operator are the same, the operator will always return the same value regardless of the condition. Either the operator itself is pointless, or a mistake was made in coding it. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2758",
        "messageFormat": "This operation returns the same value whether the condition is 'true' or 'false'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2760",
        "title": "Sequential tests should not check the same condition",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "When the same condition is checked twice in a row, it is either confusing - why have separate checks? - or an error - some other condition should have been checked in the second test.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2760",
        "messageFormat": "This condition was just checked on line {0}.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2761",
        "title": "Doubled prefix operators \"!!\" and \"~~\" should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "Calling the ! or ~ prefix operator twice does nothing: the second invocation undoes the first. Such mistakes are typically caused by accidentally double-tapping the key in question without noticing.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2761",
        "messageFormat": "Use the '{0}' operator just once or not at all.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2857",
        "title": "SQL keywords should be delimited by whitespace",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Bug",
        "description": "Badly formed SQL is likely to cause errors at runtime.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2857",
        "messageFormat": "Add a space before '{0}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2930",
        "title": "\"IDisposables\" should be disposed",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Bug",
        "description": "When writing managed code, you don't need to worry about allocating or freeing memory: The garbage collector takes care of it. For efficiency reasons, some objects such as Bitmap use unmanaged memory, enabling for example the use of pointer arithmetic. Such objects have potentially huge unmanaged memory footprints, but will have tiny managed ones. Unfortunately, the garbage collector only sees the tiny managed footprint, and fails to reclaim the unmanaged memory (by calling Bitmap's finalizer method) in a timely fashion. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2930",
        "messageFormat": "Dispose '{0}' when it is no longer needed.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2931",
        "title": "Classes with \"IDisposable\" members should implement \"IDisposable\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Blocker Bug",
        "description": "An IDisposable object should be disposed (there are some rare exceptions where not disposing is fine, most notably Task). If a class has an IDisposable field, there can be two situations:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2931",
        "messageFormat": "Implement 'IDisposable' in this class and use the 'Dispose' method to call 'Dispose' on {0}.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2933",
        "title": "Fields that are only assigned in the constructor should be \"readonly\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "readonly fields can only be assigned in a class constructor. If a class has a field that's not marked readonly but is only set in the constructor, it could cause confusion about the field's intended use. To avoid confusion, such fields should be marked readonly to make their intended use explicit, and to prevent future maintainers from inadvertently changing their use.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2933",
        "messageFormat": "Make '{0}' 'readonly'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2934",
        "title": "Property assignments should not be made for \"readonly\" fields not constrained to reference types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Bug",
        "description": "While the properties of a readonly reference type field can still be changed after initialization, those of a readonly value field, such as a struct, cannot. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2934",
        "messageFormat": "Restrict '{0}' to be a reference type or remove this assignment of '{1}'; it is useless if '{0}' is a value type.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2952",
        "title": "Classes should \"Dispose\" of members from the classes' own \"Dispose\" methods",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Bug",
        "description": "It is possible in an IDisposable to call Dispose on class members from any method, but the contract of Dispose is that it will clean up all unmanaged resources. Move disposing of members to some other method, and you risk resource leaks.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2952",
        "messageFormat": "Move this 'Dispose' call into this class' own 'Dispose' method.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2953",
        "title": "Methods named \"Dispose\" should implement \"IDisposable.Dispose\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Code Smell",
        "description": "Dispose as a method name should be used exclusively to implement IDisposable.Dispose to prevent any confusion.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2953",
        "messageFormat": "Either implement 'IDisposable.Dispose', or totally rename this method to prevent confusion.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S2955",
        "title": "Generic parameters not constrained to reference types should not be compared to \"null\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Bug",
        "description": "When constraints have not been applied to restrict a generic type parameter to be a reference type, then a value type, such as a struct, could also be passed. In such cases, comparing the type parameter to null would always be false, because a struct can be empty, but never null. If a value type is truly what's expected, then the comparison should use default(). If it's not, then constraints should be added so that no value type can be passed.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2955",
        "messageFormat": "Use a comparison to 'default({0})' instead or add a constraint to '{0}' so that it can't be a value type.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2971",
        "title": "\"IEnumerable\" LINQs should be simplified",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "In the interests of readability, code that can be simplified should be simplified. To that end, there are several ways IEnumerable language integrated queries (LINQ) can be simplified",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2971",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2995",
        "title": "\"Object.ReferenceEquals\" should not be used for value types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "Using Object.ReferenceEquals to compare the references of two value types simply won't return the expected results most of the time because such types are passed by value, not by reference.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2995",
        "messageFormat": "Use a different kind of comparison for these value types.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2996",
        "title": "\"ThreadStatic\" fields should not be initialized",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "When an object has a field annotated with ThreadStatic, that field is shared within a given thread, but unique across threads. Since a class' static initializer is only invoked for the first thread created, it also means that only the first thread will have the expected initial values.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2996",
        "messageFormat": "Remove this initialization of '{0}' or make it lazy.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S2997",
        "title": "\"IDisposables\" created in a \"using\" statement should not be returned",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "Typically you want to use using to create a local IDisposable variable; it will trigger disposal of the object when control passes out of the block's scope. The exception to this rule is when your method returns that IDisposable. In that case using disposes of the object before the caller can make use of it, likely causing exceptions at runtime. So you should either remove using or avoid returning the IDisposable.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-2997",
        "messageFormat": "Remove the 'using' statement; it will cause automatic disposal of {0}.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3005",
        "title": "\"ThreadStatic\" should not be used on non-static fields",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "When a non-static class field is annotated with ThreadStatic, the code seems to show that the field can have different values for different calling threads, but that's not the case, since the ThreadStatic attribute is simply ignored on non-static fields. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3005",
        "messageFormat": "Remove the 'ThreadStatic' attribute from this definition.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3010",
        "title": "Static fields should not be updated in constructors",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Assigning a value to a static field in a constructor could cause unreliable behavior at runtime since it will change the value for all instances of the class.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3010",
        "messageFormat": "Remove this assignment of '{0}' or initialize it statically.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S3011",
        "title": "Reflection should not be used to increase accessibility of classes, methods, or fields",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "This rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a field value. Altering or bypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could lead to run-time errors.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3011",
        "messageFormat": "Make sure that this accessibility bypass is safe here.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S3052",
        "title": "Members should not be initialized to default values",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "The compiler automatically initializes class fields, auto-properties and events to their default values before setting them with any initialization values, so there is no need to explicitly set a member to its default value. Further, under the logic that cleaner code is better code, it's considered poor style to do so.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3052",
        "messageFormat": "Remove this initialization to '{0}', the compiler will do that for you.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3060",
        "title": "\"is\" should not be used with \"this\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Code Smell",
        "description": "There's no valid reason to test this with is. The only plausible explanation for such a test is that you're executing code in a parent class conditionally based on the kind of child class this is. But code that's specific to a child class should be in that child class, not in the parent.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3060",
        "messageFormat": "Offload the code that's conditional on this 'is' test to the appropriate subclass and remove the test.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S3168",
        "title": "\"async\" methods should not return \"void\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "An async method with a void return type is a \"fire and forget\" method best reserved for event handlers because there's no way to wait for the method's execution to complete and respond accordingly. There's also no way to catch exceptions thrown from the method.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3168",
        "messageFormat": "Return 'Task' instead.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3169",
        "title": "Multiple \"OrderBy\" calls should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "There's no point in chaining multiple OrderBy calls in a LINQ; only the last one will be reflected in the result because each subsequent call completely reorders the list. Thus, calling OrderBy multiple times is a performance issue as well, because all of the sorting will be executed, but only the result of the last sort will be kept.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3169",
        "messageFormat": "Use 'ThenBy' instead.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3172",
        "title": "Delegates should not be subtracted",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "In C#, delegates can be added together to chain their execution, and subtracted to remove their execution from the chain.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3172",
        "messageFormat": "Review this subtraction of a chain of delegates: it may not work as you expect.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3215",
        "title": "\"interface\" instances should not be cast to concrete types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "Needing to cast from an interface to a concrete type indicates that something is wrong with the abstractions in use, likely that something is missing from the interface. Instead of casting to a discrete type, the missing functionality should be added to the interface. Otherwise there is a risk of runtime exceptions.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3215",
        "messageFormat": "Remove this cast and edit the interface to add the missing functionality.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S3216",
        "title": "\"ConfigureAwait(false)\" should be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "After an awaited Task has executed, you can continue execution in the original, calling thread or any arbitrary thread. Unless the rest of the code needs the context from which the Task was spawned, Task.ConfigureAwait(false) should be used to keep execution in the Task thread to avoid the need for context switching and the possibility of deadlocks.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3216",
        "messageFormat": "Add '.ConfigureAwait(false)' to this call to allow execution to continue in any thread.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S3217",
        "title": "\"Explicit\" conversions of \"foreach\" loops should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "The foreach statement was introduced in the C# language prior to generics to make it easier to work with the non-generic collections available at that time such as ArrayList. The foreach statements allows you to downcast elements of a collection of Objects to any other type. The problem is that to achieve the cast, the foreach statements silently performs explicit type conversion, which at runtime can result in an InvalidCastException.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3217",
        "messageFormat": "Either change the type of '{0}' to '{1}' or iterate on a generic collection of type '{2}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3218",
        "title": "Inner class members should not shadow outer class \"static\" or type members",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "It's possible to name the members of an inner class the same as the static members of its enclosing class - possible, but a bad idea. That's because maintainers may be confused about which members are being used where. Instead the inner class' members should be renamed and all the references updated.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3218",
        "messageFormat": "Rename this {0} to not shadow the outer class' member with the same name.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3220",
        "title": "Method calls should not resolve ambiguously to overloads with \"params\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "The rules for method resolution are complex and perhaps not properly understood by all coders. The params keyword can make method declarations overlap in non-obvious ways, so that slight changes in the argument types of an invocation can resolve to different methods.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3220",
        "messageFormat": "Review this call, which partially matches an overload without 'params'. The partial match is '{0}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3234",
        "title": "\"GC.SuppressFinalize\" should not be invoked for types without destructors",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "GC.SuppressFinalize asks the Common Language Runtime not to call the finalizer of an object. This is useful when implementing the dispose pattern where object finalization is already handled in IDisposable.Dispose. However, it has no effect if there is no finalizer defined in the object's type, so using it in such cases is just confusing.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3234",
        "messageFormat": "Remove this useless call to 'GC.SuppressFinalize'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3235",
        "title": "Redundant parentheses should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Redundant parentheses are simply wasted keystrokes, and should be removed.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3235",
        "messageFormat": "Remove these redundant parentheses.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3236",
        "title": "Caller information arguments should not be provided explicitly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Caller information attributes: CallerFilePathAttribute and CallerLineNumberAttribute provide a way to get information about the caller of a method through optional parameters. But the arguments for these optional parameters are only generated if they are not explicitly defined in the call. Thus, specifying the argument values defeats the purpose of the attributes.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3236",
        "messageFormat": "Remove this argument from the method call; it hides the caller information.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3237",
        "title": "\"value\" parameters should be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Code Smell",
        "description": "In property and indexer set methods, and in event add and remove methods, the implicit value parameter holds the value the accessor was called with. Not using the value means that the accessor ignores the caller's intent which could cause unexpected results at runtime.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3237",
        "messageFormat": "Use the 'value' parameter in this {0} accessor declaration.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3240",
        "title": "The simplest possible condition syntax should be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "In the interests of keeping code clean, the simplest possible conditional syntax should be used. That means ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3240",
        "messageFormat": "Use the '{0}' operator here.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3241",
        "title": "Methods should not return values that are never used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Private methods are clearly intended for use only within their own scope. When such methods return values that are never used by any of their callers, then clearly there is no need to actually make the return, and it should be removed in the interests of efficiency and clarity. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3241",
        "messageFormat": "Change return type to 'void'; not a single caller uses the returned value.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3242",
        "title": "Method parameters should be declared with base types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "When a derived type is used as a parameter instead of the base type, it limits the uses of the method. If the additional functionality that is provided in the derived type is not requires then that limitation isn't required, and should be removed.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3242",
        "messageFormat": "Consider using more general type '{0}' instead of '{1}'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3244",
        "title": "Anonymous delegates should not be used to unsubscribe from Events",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "It is possible to subscribe to events with anonymous delegates, but having done so, it is impossible to unsubscribe from them. That's because the process of subscribing adds the delegate to a list. The process of unsubscribing essentially says: remove this item from the subscription list. But because an anonymous delegate was used in both cases, the unsubscribe attempt tries to remove a different item from the list than was added. The result: NOOP.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3244",
        "messageFormat": "Unsubscribe with the same delegate that was used for the subscription.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3246",
        "title": "Generic type parameters should be co/contravariant when possible",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "In the interests of making code as usable as possible, interfaces and delegates with generic parameters should use the out and in modifiers when possible to make the interfaces and delegates covariant and contravariant, respectively.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3246",
        "messageFormat": "Add the '{0}' keyword to parameter '{1}' to make it '{2}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S3247",
        "title": "Duplicate casts should not be made",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Because the is operator performs a cast if the object is not null, using is to check type and then casting the same argument to that type, necessarily performs two casts. The same result can be achieved more efficiently with a single cast using as, followed by a null-check.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3247",
        "messageFormat": "Replace this type-check-and-cast sequence with an 'as' and a null check.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3249",
        "title": "Classes directly extending \"object\" should not call \"base\" in \"GetHashCode\" or \"Equals\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "Making a base call in an overriding method is generally a good idea, but not in GetHashCode and Equals for classes that directly extend object because those methods are based on the object reference. Meaning that no two objects that use those base methods will ever be equal or have the same hash.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3249",
        "messageFormat": "Remove this 'base' call to 'object.{0}', which is directly based on the object reference.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3251",
        "title": "Implementations should be provided for \"partial\" methods",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "partial methods allow an increased degree of flexibility in programming a system. Hooks can be added to generated code by invoking methods that define their signature, but might not have an implementation yet. But if the implementation is still missing when the code makes it to production, the compiler silently removes the call. In the best case scenario, such calls simply represent cruft, but in they worst case they are critical, missing functionality, the loss of which will lead to unexpected results at runtime.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3251",
        "messageFormat": "Supply an implementation for {0} partial method{1}.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S3253",
        "title": "Constructor and destructor declarations should not be redundant",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Since the compiler will automatically invoke the base type's no-argument constructor, there's no need to specify its invocation explicitly. Also, when only a single public parameterless constructor is defined in a class, then that constructor can be removed because the compiler would generate it automatically. Similarly, empty static constructors and empty destructors are also wasted keystrokes.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3253",
        "messageFormat": "Remove this redundant {0}.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3254",
        "title": "Default parameter values should not be passed as arguments",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Specifying the default parameter values in a method call is redundant. Such values should be omitted in the interests of readability.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3254",
        "messageFormat": "Remove this default value assigned to parameter '{0}'.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S3256",
        "title": "\"string.IsNullOrEmpty\" should be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Using string.Equals to determine if a string is empty is significantly slower than using string.IsNullOrEmpty() or checking for string.Length == 0. string.IsNullOrEmpty() is both clear and concise, and therefore preferred to laborious, error-prone, manual null- and emptiness-checking.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3256",
        "messageFormat": "Use 'string.IsNullOrEmpty()' instead of comparing to empty string.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S3257",
        "title": "Declarations and initializations should be as concise as possible",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Unnecessarily verbose declarations and initializations make it harder to read the code, and should be simplified.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3257",
        "messageFormat": "Remove the {0}; it is redundant.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3261",
        "title": "Namespaces should not be empty",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Namespaces with no lines of code clutter a project and should be removed. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3261",
        "messageFormat": "Remove this empty namespace.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3262",
        "title": "\"params\" should be used on overrides",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Overriding methods automatically inherit the params behavior. To ease readability, this modifier should be explicitly used in the overriding method as well.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3262",
        "messageFormat": "'params' should not be removed from an override.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3263",
        "title": "Static fields should appear in the order they must be initialized ",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "Static field initializers are executed in the order in which they appear in the class from top to bottom. Thus, placing a static field in a class above the field or fields required for its initialization will yield unexpected results.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3263",
        "messageFormat": "Move this field's initializer into a static constructor.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3264",
        "title": "Events should be invoked",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Events that are not invoked anywhere are dead code, and there's no good reason to keep them in the source.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3264",
        "messageFormat": "Remove the unused event '{0}' or invoke it.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3265",
        "title": "Non-flags enums should not be used in bitwise operations",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "enums are usually used to identify distinct elements in a set of values. However enums can be treated as bit fields and bitwise operations can be used on them to combine the values. This is a good way of specifying multiple elements of set with a single value. When enums are used this way, it is a best practice to mark the enum with the FlagsAttribute.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3265",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3329",
        "title": "Cipher Block Chaining IV's should be random and unique",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Vulnerability",
        "description": "In encryption, when Cipher Block Chaining (CBC) is used, the Initialization Vector (IV) must be random and unpredictable. Otherwise, the encrypted value is vulnerable to crypto-analysis attacks such as the \"Chosen-Plaintext Attack\".",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3329",
        "messageFormat": "Use a dynamically-generated, random IV.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S3330",
        "title": "Creating cookies without the \"HttpOnly\" flag is security-sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Security Hotspot",
        "description": "When a cookie is configured with the HttpOnly attribute set to true, the browser guaranties that no client-side script will be able to read it. In most cases, when a cookie is created, the default value of HttpOnly is false and it's up to the developer to decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target the theft of session-cookies, the HttpOnly attribute can help to reduce their impact as it won't be possible to exploit the XSS vulnerability to steal session-cookies.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3330",
        "messageFormat": "Make sure creating this cookie without the \"HttpOnly\" flag is safe.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S3343",
        "title": "Caller information parameters should come at the end of the parameter list",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "Caller information attributes (CallerFilePathAttribute, CallerLineNumberAttribute, and CallerMemberNameAttribute) provide a way to get information about the caller of a method through optional parameters. But they only work right if their values aren't provided explicitly. So if you define a method with caller info attributes in the middle of the parameter list, you put your callers in a bad position: they are forced to use named arguments if they want to use the method properly.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3343",
        "messageFormat": "Move '{0}' to the end of the parameter list.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S3346",
        "title": "Expressions used in \"Debug.Assert\" should not produce side effects",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "An assertion is a piece of code that's used during development when the compilation debug mode is activated. It allows a program to check itself as it runs. When an assertion is true, that means everything is operating as expected. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3346",
        "messageFormat": "Expressions used in 'Debug.Assert' should not produce side effects.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S3353",
        "title": "Unchanged local variables should be \"const\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "Marking a variable that is unchanged after initialization const is an indication to future maintainers that \"no this isn't updated, and it's not supposed to be\". const should be used in these situations in the interests of code clarity.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3353",
        "messageFormat": "Add the 'const' modifier to '{0}'.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S3358",
        "title": "Ternary operators should not be nested",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Just because you can do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you) scratching their heads and cursing.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3358",
        "messageFormat": "Extract this nested ternary operation into an independent statement.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3366",
        "title": "\"this\" should not be exposed from constructors",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "In single-threaded environments, the use of this in constructors is normal, and expected. But in multi-threaded environments, it could expose partially-constructed objects to other threads, and should be used with caution.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3366",
        "messageFormat": "Make sure the use of 'this' doesn't expose partially-constructed instances of this class in multi-threaded environments.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S3376",
        "title": "Attribute, EventArgs, and Exception type names should end with the type being extended",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Adherence to the standard naming conventions makes your code not only more readable, but more usable. For instance, class FirstAttribute : Attribute can be used simply with First, but you must use the full name for class AttributeOne : Attribute.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3376",
        "messageFormat": "Make this class name end with '{0}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3397",
        "title": "\"base.Equals\" should not be used to check for reference equality in \"Equals\" if \"base\" is not \"object\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Bug",
        "description": "object.Equals() overrides can be optimized by checking first for reference equality between this and the parameter. This check can be implemented by calling object.ReferenceEquals() or base.Equals(), where base is object. However, using base.Equals() is a maintenance hazard because while it works if you extend Object directly, if you introduce a new base class that overrides Equals, it suddenly stops working.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3397",
        "messageFormat": "Change this guard condition to call 'object.ReferenceEquals'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3400",
        "title": "Methods should not return constants",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a method call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3400",
        "messageFormat": "Remove this method and declare a constant for this value.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S3415",
        "title": "Assertion arguments should be passed in the correct order",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "The standard assertions library methods such as AreEqual and AreSame in MSTest and NUnit, or Equal and Same in XUnit, expect the first argument to be the expected value and the second argument to be the actual value. Swap them, and your test will still have the same outcome (succeed/fail when it should) but the error messages will be confusing.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3415",
        "messageFormat": "Make sure these 2 arguments are in the correct order: expected value, actual value.",
        "customTags": [
          "C#",
          "SonarWay",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3427",
        "title": "Method overloads with default parameter values should not overlap ",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Code Smell",
        "description": "The rules for method resolution are complex and perhaps not properly understood by all coders. Having overloads with optional parameter values makes the matter even harder to understand. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3427",
        "messageFormat": "This method signature overlaps the one defined on line {0}{1}, the default parameter value {2}.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3431",
        "title": "\"[ExpectedException]\" should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "It should be clear to a casual reader what code a test is testing and what results are expected. Unfortunately, that's not usually the case with the [ExpectedException] attribute since an exception could be thrown from almost any line in the method.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3431",
        "messageFormat": "Replace the 'ExpectedException' attribute with a try/catch block.",
        "customTags": [
          "C#",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3433",
        "title": "Test method signatures should be correct",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Code Smell",
        "description": "A method is detected as test method if marked with one of the following attributes [TestMethod] or [DataTestMethod] (for mstest), [Fact] or [Theory] (for xunit) or [Test], [TestCase], [TestCaseSource] or [Theory] (for nunit). However, whether or not they have a test attribute, non-public methods are not recognized as tests, and therefore not executed. Neither are async void methods, or methods with generics anywhere in their signatures. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3433",
        "messageFormat": "Make this test method {0}.",
        "customTags": [
          "C#",
          "SonarWay",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3440",
        "title": "Variables should not be checked against the values they're about to be assigned",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "There's no point in checking a variable against the value you're about to assign it. Save the cycles and lines of code, and simply perform the assignment.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3440",
        "messageFormat": "Remove this useless conditional.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3441",
        "title": "Redundant property names should be omitted in anonymous classes",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "When an anonymous type's properties are copied from properties or variables with the same names, it yields cleaner code to omit the new type's property name and the assignment operator.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3441",
        "messageFormat": "Remove the redundant '{0} ='.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3442",
        "title": "\"abstract\" classes should not have \"public\" constructors",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Since abstract classes can't be instantiated, there's no point in their having public or internal constructors. If there is basic initialization logic that should run when an extending class instance is created, you can by all means put it in a constructor, but make that constructor private or protected.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3442",
        "messageFormat": "Change the visibility of this constructor to 'protected'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3443",
        "title": "Type should not be examined on \"System.Type\" instances",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Code Smell",
        "description": "If you call GetType() on a Type variable, the return value will always be typeof(System.Type). So there's no real point in making that call. The same applies to passing a type argument to IsInstanceOfType. In both cases the results are entirely predictable.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3443",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3444",
        "title": "Interfaces should not simply inherit from base interfaces with colliding members",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "When an interface inherits from two interfaces that both define a member with the same name, trying to access that member through the derived interface will result in the compiler error CS0229 Ambiguity between 'IBase1.SomeProperty' and 'IBase2.SomeProperty'.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3444",
        "messageFormat": "Rename or add member{1} {0} to this interface to resolve ambiguities.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S3445",
        "title": "Exceptions should not be explicitly rethrown",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "When rethrowing an exception, you should do it by simply calling throw; and not throw exc;, because the stack trace is reset with the second syntax, making debugging a lot harder.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3445",
        "messageFormat": "Consider using 'throw;' to preserve the stack trace.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S3447",
        "title": "\"[Optional]\" should not be used on \"ref\" or \"out\" parameters",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "The use of ref or out in combination with [Optional] is both confusing and contradictory. [Optional] indicates that the parameter doesn't have to be provided, while out and ref mean that the parameter will be used to return data to the caller (ref additionally indicates that the parameter may also be used to pass data into the method).",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3447",
        "messageFormat": "Remove the 'Optional' attribute, it cannot be used with '{0}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3449",
        "title": "Right operands of shift operators should be integers",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Bug",
        "description": "Numbers can be shifted with the << and >> operators, but the right operand of the operation needs to be an int or a type that has an implicit conversion to int. However, with dynamic, the compiler's type checking is turned off, so you can pass anything to a shift operator and have it compile. And if the argument can't be converted to int at runtime, then a RuntimeBinderException will be raised.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3449",
        "messageFormat": "Remove this erroneous shift, it will fail because '{0}' can't be implicitly converted to 'int'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3450",
        "title": "Parameters with \"[DefaultParameterValue]\" attributes should also be marked \"[Optional]\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "There is no point in providing a default value for a parameter if callers are required to provide a value for it anyway. Thus, [DefaultParameterValue] should always be used in conjunction with [Optional].",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3450",
        "messageFormat": "Add the 'Optional' attribute to this parameter.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3451",
        "title": "\"[DefaultValue]\" should not be used when \"[DefaultParameterValue]\" is meant",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "The use of [DefaultValue] with [Optional] has no more effect than [Optional] alone. That's because [DefaultValue] doesn't actually do anything; it merely indicates the intent for the value. More than likely, [DefaultValue] was used in confusion instead of [DefaultParameterValue].",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3451",
        "messageFormat": "Use '[DefaultParameterValue]' instead.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3453",
        "title": "Classes should not have only \"private\" constructors",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "A class with only private constructors can't be instantiated, thus, it seems to be pointless code.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3453",
        "messageFormat": "This class can't be instantiated; make {0} 'public'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3456",
        "title": "\"string.ToCharArray()\" should not be called redundantly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Bug",
        "description": "ToCharArray can be omitted when the operation on the array could have been done directly on the string, such as when iterating over the characters in a string, and when accessing a character in a string via an array index. In those cases, explicit ToCharArray calls should be omitted.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3456",
        "messageFormat": "Remove this redundant 'ToCharArray' call.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3457",
        "title": "Composite format strings should be used correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Because composite format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that lead to unexpected behaviors or runtime errors. This rule statically validates the good behavior of composite formats when calling the methods of String.Format, StringBuilder.AppendFormat, Console.Write, Console.WriteLine, TextWriter.Write, TextWriter.WriteLine, Debug.WriteLine(String, Object[]), Trace.TraceError(String, Object[]), Trace.TraceInformation(String, Object[]), Trace.TraceWarning(String, Object[]) and TraceSource.TraceInformation(String, Object[]). ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3457",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3458",
        "title": "Empty \"case\" clauses that fall through to the \"default\" should be omitted",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Empty case clauses that fall through to the default are useless. Whether or not such a case is present, the default clause will be invoked. Such cases simply clutter the code, and should be removed.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3458",
        "messageFormat": "Remove this empty 'case' clause.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3459",
        "title": "Unassigned members should be removed",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Fields and auto-properties that are never assigned to hold the default values for their types. They are either pointless code or, more likely, mistakes. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3459",
        "messageFormat": "Remove unassigned {0} '{1}', or set its value.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3464",
        "title": "Type inheritance should not be recursive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Bug",
        "description": "Recursion is acceptable in methods, where you can break out of it. But with class types, you end up with code that will compile but not run if you try to instantiate the class.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3464",
        "messageFormat": "Refactor this {0} so that the generic inheritance chain is not recursive.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S3466",
        "title": "Optional parameters should be passed to \"base\" calls",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "Generally, writing the least code that will readably do the job is a good thing, so omitting default parameter values seems to make sense. Unfortunately, when you omit them from the base call in an override, you're not actually getting the job done thoroughly, because you're ignoring the value the caller passed in. The result will likely not be what the caller expected.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3466",
        "messageFormat": "Pass the missing user-supplied parameter value{0} to this 'base' call.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3532",
        "title": "Empty \"default\" clauses should be removed",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "The default clause should take appropriate action. Having an empty default is a waste of keystrokes.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3532",
        "messageFormat": "Remove this empty 'default' clause.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3597",
        "title": "\"ServiceContract\" and \"OperationContract\" attributes should be used together",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "The ServiceContract attribute specifies that a class or interface defines the communication contract of a Windows Communication Foundation (WCF) service. The service operations of this class or interface are defined by OperationContract attributes added to methods. It doesn't make sense to define a contract without any service operations; thus, in a ServiceContract class or interface at least one method should be annotated with OperationContract. Similarly, WCF only serves OperationContract methods that are defined inside ServiceContract classes or interfaces; thus, this rule also checks that ServiceContract is added to the containing type of OperationContract methods.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3597",
        "messageFormat": "Add the '{0}' attribute to {1}.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3598",
        "title": "One-way \"OperationContract\" methods should have \"void\" return type",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "When declaring a Windows Communication Foundation (WCF) OperationContract method one-way, that service method won't return any result, not even an underlying empty confirmation message. These are fire-and-forget methods that are useful in event-like communication. Specifying a return type therefore does not make sense.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3598",
        "messageFormat": "This method can't return any values because it is marked as one-way operation.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3600",
        "title": "\"params\" should not be introduced on overrides",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "Adding params to a method override has no effect. The compiler accepts it, but the callers won't be able to benefit from the added modifier.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3600",
        "messageFormat": "'params' should be removed from this override.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3603",
        "title": "Methods with \"Pure\" attribute should return a value ",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "Marking a method with the Pure attribute specifies that the method doesn't make any visible changes; thus, the method should return a result, otherwise the call to the method should be equal to no-operation. So Pure on a void method is either a mistake, or the method doesn't do any meaningful task.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3603",
        "messageFormat": "Remove the 'Pure' attribute or change the method to return a value.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3604",
        "title": "Member initializer values should not be redundant",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Fields, properties and events can be initialized either inline or in the constructor. Initializing them inline and in the constructor at the same time is redundant; the inline initialization will be overridden.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3604",
        "messageFormat": "Remove the member initializer, all constructors set an initial value for the member.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3610",
        "title": "Nullable type comparison should not be redundant",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "Calling GetType() on a nullable object returns the underlying value type. Thus, comparing the returned Type object to typeof(Nullable<SomeType>) doesn't make sense. The comparison either throws an exception or the result can be known at compile time.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3610",
        "messageFormat": "Remove this redundant type comparison.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3626",
        "title": "Jump statements should not be redundant",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Jump statements, such as return, yield break, goto, and continue let you change the default flow of program execution, but jump statements that direct the control flow to the original direction are just a waste of keystrokes.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3626",
        "messageFormat": "Remove this redundant jump.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3655",
        "title": "Empty nullable value should not be accessed",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "Nullable value types can hold either a value or null. The value held in the nullable type can be accessed with the Value property, but .Value throws an InvalidOperationException when the value is null. To avoid the exception, a nullable type should always be tested before .Value is accessed.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3655",
        "messageFormat": "'{0}' is null on at least one execution path.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3693",
        "title": "Exception constructors should not throw exceptions",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Blocker Bug",
        "description": "It may be a good idea to raise an exception in a constructor if you're unable to fully flesh the object in question, but not in an exception constructor. If you do, you'll interfere with the exception that was originally being thrown. Further, it is highly unlikely that an exception raised in the creation of an exception will be properly handled in the calling code, and the unexpected, unhandled exception will lead to program termination.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3693",
        "messageFormat": "Avoid throwing exceptions in this constructor.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3717",
        "title": "Track use of \"NotImplementedException\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "NotImplementedException is often used to mark methods which must be implemented for the overall functionality to be complete, but which the developer wants to implement later. That's as opposed to the NotSupportedException which is thrown by methods which are required by base classes or interfaces, but which are not appropriate to the current class.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3717",
        "messageFormat": "Implement this method or throw 'NotSupportedException' instead.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3776",
        "title": "Cognitive Complexity of methods should not be too high",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be difficult to maintain.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3776",
        "messageFormat": "Refactor this {0} to reduce its Cognitive Complexity from {1} to the {2} allowed.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3869",
        "title": "\"SafeHandle.DangerousGetHandle\" should not be called",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Bug",
        "description": "Not surprisingly, the SafeHandle.DangerousGetHandle method is dangerous. That's because it may not return a valid handle. Using it can lead to leaks and vulnerabilities. While it is possible to use the method successfully, it's extremely difficult to do correctly, so the method should simply be avoided altogether.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3869",
        "messageFormat": "Refactor the code to remove this use of '{0}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3871",
        "title": "Exception types should be \"public\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "The point of having custom exception types is to convey more information than is available in standard types. But custom exception types must be public for that to work. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3871",
        "messageFormat": "Make this exception 'public'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3872",
        "title": "Parameter names should not duplicate the names of their methods",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "The name of a method should communicate what it does, and the names of its parameters should indicate how they're used. If a method and its parameter have the same name it is an indication that one of these rules of thumb has been broken, if not both. Even if by some trick of language that's not the case, it is still likely to confuse callers and maintainers.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3872",
        "messageFormat": "Rename the parameter '{0}' so that it does not duplicate the method name.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3874",
        "title": "\"out\" and \"ref\" parameters should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "Passing a parameter by reference, which is what happens when you use the out or ref parameter modifiers, means that the method will receive a pointer to the argument, rather than the argument itself. If the argument was a value type, the method will be able to change the argument's values. If it was a reference type, then the method receives a pointer to a pointer, which is usually not what was intended. Even when it is what was intended, this is the sort of thing that's difficult to get right, and should be used with caution.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3874",
        "messageFormat": "Consider refactoring this method in order to remove the need for this '{0}' modifier.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3875",
        "title": "\"operator==\" should not be overloaded on reference types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Code Smell",
        "description": "The use of == to compare to objects is expected to do a reference comparison. That is, it is expected to return true if and only if they are the same object instance. Overloading the operator to do anything else will inevitably lead to the introduction of bugs by callers. On the other hand, overloading it to do exactly that is pointless; that's what == does by default.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3875",
        "messageFormat": "Remove this overload of 'operator =='.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3876",
        "title": "Strings or integral types should be used for indexers",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Strings and integral types are typically used as indexers. When some other type is required, it typically indicates design problems, and potentially a situation where a method should be used instead.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3876",
        "messageFormat": "Use string or an integral type here, or refactor this indexer into a method.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3877",
        "title": "Exceptions should not be thrown from unexpected methods",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Code Smell",
        "description": "It is expected that some methods should be called with caution, but others, such as ToString, are expected to \"just work\". Throwing an exception from such a method is likely to break callers' code unexpectedly.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3877",
        "messageFormat": "Remove this 'throw' statement.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3880",
        "title": "Finalizers should not be empty",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "Finalizers come with a performance cost due to the overhead of tracking the life cycle of objects. An empty one is consequently costly with no benefit or justification.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3880",
        "messageFormat": "Remove this empty finalizer.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3881",
        "title": "\"IDisposable\" should be implemented correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "The IDisposable interface is a mechanism to release unmanaged resources, if not implemented correctly this could result in resource leaks or more severe bugs.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3881",
        "messageFormat": "Fix this implementation of 'IDisposable' to conform to the dispose pattern.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3884",
        "title": "\"CoSetProxyBlanket\" and \"CoInitializeSecurity\" should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Vulnerability",
        "description": "CoSetProxyBlanket and CoInitializeSecurity both work to set the permissions context in which the process invoked immediately after is executed. Calling them from within that process is useless because it's too late at that point; the permissions context has already been set.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3884",
        "messageFormat": "Refactor the code to remove this use of '{0}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3885",
        "title": "\"Assembly.Load\" should be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "The parameter to Assembly.Load includes the full specification of the dll to be loaded. Use another method, and you might end up with a dll other than the one you expected. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3885",
        "messageFormat": "Replace this call to '{0}' with 'Assembly.Load'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3887",
        "title": "Mutable, non-private fields should not be \"readonly\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Bug",
        "description": "Using the readonly keyword on a field means that it can't be changed after initialization. However, when applied to collections or arrays, that's only partly true. readonly enforces that another instance can't be assigned to the field, but it cannot keep the contents from being updated. That means that in practice, the field value really can be changed, and the use of readonly on such a field is misleading, and you're likely to not be getting the behavior you expect.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3887",
        "messageFormat": "Use an immutable collection or reduce the accessibility of the field(s) {0}.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3889",
        "title": "Neither \"Thread.Resume\" nor \"Thread.Suspend\" should be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Bug",
        "description": "Thread.Suspend and Thread.Resume can give unpredictable results, and both methods have been deprecated. Indeed, if Thread.Suspend is not used very carefully, a thread can be suspended while holding a lock, thus leading to a deadlock. Other safer synchronization mechanisms should be used, such as Monitor, Mutex, and Semaphore.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3889",
        "messageFormat": "Refactor the code to remove this use of '{0}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3897",
        "title": "Classes that provide \"Equals(<T>)\" should implement \"IEquatable<T>\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "The IEquatable<T> interface has only one method in it: Equals(<T>). If you've already written Equals(T), there's no reason not to explicitly implement IEquatable<T>. Doing so expands the utility of your class by allowing it to be used where an IEquatable is called for.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3897",
        "messageFormat": "Implement 'IEquatable<{0}>'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3898",
        "title": "Value types should implement \"IEquatable<T>\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "If you're using a struct, it is likely because you're interested in performance. But by failing to implement IEquatable<T> you're loosing performance when comparisons are made because without IEquatable<T>, boxing and reflection are used to make comparisons. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3898",
        "messageFormat": "Implement 'IEquatable<T>' in value type '{0}'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3900",
        "title": "Arguments of public methods should be validated against null",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "A publicly accessible method can be called from anywhere, which means you should validate parameters to be within the expected constraints. In general, checking against null is recommended defensive programming.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3900",
        "messageFormat": "Refactor this {0}.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3902",
        "title": "\"Assembly.GetExecutingAssembly\" should not be called",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "Using Type.Assembly to get the current assembly is nearly free in terms of performance; it's a simple property access. On the other hand, Assembly.GetExecutingAssembly() can take up to 30 times as long because it walks up the call stack to find the assembly.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3902",
        "messageFormat": "Replace this call to 'Assembly.GetExecutingAssembly()' with 'Type.Assembly'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3903",
        "title": "Types should be defined in named namespaces",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "Types are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are defined outside any named namespace are in a global namespace that cannot be referenced in code.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3903",
        "messageFormat": "Move '{0}' into a named namespace.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3904",
        "title": "Assemblies should have version information",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "If no AssemblyVersionAttribute is provided, the same default version will be used for every build. Since the version number is used by The .NET Framework to uniquely identify an assembly this can lead to broken dependencies.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3904",
        "messageFormat": "Provide an 'AssemblyVersion' attribute for assembly '{0}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S3906",
        "title": "Event Handlers should have the correct signature",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "Delegate event handlers (i.e. delegates used as type of an event) should have a very specific signature:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3906",
        "messageFormat": "Change the signature of that event handler to match the specified signature.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3908",
        "title": "Generic event handlers should be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "Since .Net Framework version 2.0 it is not necessary to declare a delegate that specifies a class derived from System.EventArgs. The System.EventHandler<TEventArgs> delegate mechanism should be used instead as it allows any class derived from EventArgs to be used with that handler.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3908",
        "messageFormat": "Refactor this delegate to use 'System.EventHandler<TEventArgs>'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3909",
        "title": "Collections should implement the generic interface",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "The NET Framework 2.0 introduced the generic interface System.Collections.Generic.IEnumerable<T> and it should be preferred over the older, non generic, interfaces.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3909",
        "messageFormat": "Refactor this collection to implement '{0}'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3923",
        "title": "All branches in a conditional structure should not have exactly the same implementation",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "Having all branches in a switch or if chain with the same implementation is an error. Either a copy-paste error was made and something different should be executed, or there shouldn't be a switch/if chain at all.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3923",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3925",
        "title": "\"ISerializable\" should be implemented correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "The ISerializable interface is the mechanism to control the type serialization process. If not implemented correctly this could result in an invalid serialization and hard to detect bugs.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3925",
        "messageFormat": "Update this implementation of 'ISerializable' to conform to the recommended serialization pattern.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S3926",
        "title": "Deserialization methods should be provided for \"OptionalField\" members",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "Fields marked with System.Runtime.Serialization.OptionalFieldAttribute are serialized just like any other field. But such fields are ignored on deserialization, and retain the default values associated with their types. Therefore, deserialization event handlers should be declared to set such fields during the deserialization process.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3926",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3927",
        "title": "Serialization event handlers should be implemented correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "Serialization event handlers that don't have the correct signature will simply not be called, thus bypassing any attempts to augment the automated de/serialization.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3927",
        "messageFormat": "Make this method {0}.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3928",
        "title": "Parameter names used into ArgumentException constructors should match an existing one ",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Some constructors of the ArgumentException, ArgumentNullException, ArgumentOutOfRangeException and DuplicateWaitObjectException classes must be fed with a valid parameter name. This rule raises an issue in two cases:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3928",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3937",
        "title": "Number patterns should be regular",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus 1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3937",
        "messageFormat": "Review this number; its irregular pattern indicates an error.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3949",
        "title": "Calculations should not overflow",
        "defaultSeverity": "Info",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "Numbers are infinite, but the types that hold them are not. Each numeric type has hard upper and lower bounds. Try to calculate or assign numbers beyond those bounds, and the result will be a value that has silently wrapped around from the expected positive value to a negative one, or vice versa.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3949",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope",
          "Unnecessary"
        ]
      },
      {
        "id": "S3956",
        "title": "\"Generic.List\" instances should not be part of public APIs",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "System.Collections.Generic.List<T> is a generic collection that is designed for performance and not inheritance. For example, it does not contain virtual members that make it easier to change the behavior of an inherited class. That means that future attempts to expand the behavior will be spoiled because the extension points simply aren't there. Instead, one of the following generic collections should be used:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3956",
        "messageFormat": "Refactor this {0} to use a generic collection designed for inheritance.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S3962",
        "title": "\"static readonly\" constants should be \"const\" instead",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "The value of a static readonly field is computed at runtime while the value of a const field is calculated at compile time, which improves performance.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3962",
        "messageFormat": "Replace this 'static readonly' declaration with 'const'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3963",
        "title": "\"static\" fields should be initialized inline",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "When a static constructor serves no other purpose that initializing static fields, it comes with an unnecessary performance cost because the compiler generates a check before each static method or instance constructor invocation.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3963",
        "messageFormat": "Initialize all 'static fields' inline and remove the 'static constructor'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3966",
        "title": "Objects should not be disposed more than once",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Disposing an object twice, either with the using keyword or by calling Dispose directly, in the same method is at best confusing and at worst error-prone. The next developer might see only one of the Dispose/using and try to use an already-disposed object.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3966",
        "messageFormat": "Refactor this code to make sure '{0}' is disposed only once.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3967",
        "title": "Multidimensional arrays should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "A jagged array is an array whose elements are arrays. It is recommended over a multidimensional array because the arrays that make up the elements can be of different sizes, which avoids wasting memory space.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3967",
        "messageFormat": "Change this multidimensional array to a jagged array.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3971",
        "title": "\"GC.SuppressFinalize\" should not be called",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "GC.SuppressFinalize requests that the system not call the finalizer for the specified object. This should only be done when implementing Dispose as part of the Dispose Pattern.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3971",
        "messageFormat": "Do not call 'GC.SuppressFinalize'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3972",
        "title": "Conditionals should start on new lines",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an if and its resulting then statement. However, when an if is placed on the same line as the closing } from a preceding then, else or else if part, it is either an error - else is missing - or the invitation to a future error as maintainers fail to understand that the two statements are unconnected.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3972",
        "messageFormat": "Move this 'if' to a new line or add the missing 'else'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3973",
        "title": "A conditionally executed single line should be denoted by indentation",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention and good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely unclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3973",
        "messageFormat": "Use curly braces or indentation to denote the code conditionally executed by this '{0}'",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3981",
        "title": "Collection sizes and array length comparisons should make sense",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or equal to zero doesn't make sense, since the result is always true. Similarly testing that it is less than zero will always return false. Perhaps the intent was to check the non-emptiness of the collection or array instead. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3981",
        "messageFormat": "The {0} of '{1}' is always '>=0', so fix this test to get the real expected behavior.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3984",
        "title": "Exceptions should not be created without being thrown",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "Creating a new Exception without actually throwing it is useless and is probably due to a mistake.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3984",
        "messageFormat": "Throw this exception or remove this useless statement.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3990",
        "title": "Assemblies should be marked as CLS compliant",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "Assemblies should conform with the Common Language Specification (CLS) in order to be usable across programming languages. To be compliant an assembly has to indicate it with System.CLSCompliantAttribute.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3990",
        "messageFormat": "Provide a 'CLSCompliant' attribute for assembly '{0}'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3992",
        "title": "Assemblies should explicitly specify COM visibility",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "Assemblies should explicitly indicate whether they are meant to be COM visible or not. If the ComVisibleAttribute is not present, the default is to make the content of the assembly visible to COM clients.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3992",
        "messageFormat": "Provide a 'ComVisible' attribute for assembly '{0}'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3993",
        "title": "Custom attributes should be marked with \"System.AttributeUsageAttribute\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "When defining custom attributes, System.AttributeUsageAttribute must be used to indicate where the attribute can be applied. This will determine its valid locations in the code.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3993",
        "messageFormat": "Specify AttributeUsage on '{0}'{1}.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3994",
        "title": "URI Parameters should not be strings",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The System.Uri class is a safe alternative and should be preferred. At minimum, an overload of the method taking a System.Uri as a parameter should be provided in each class that contains a method with an apparent Uri passed as a string.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3994",
        "messageFormat": "Either change this parameter type to 'System.Uri' or provide an overload which takes a 'System.Uri' parameter.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3995",
        "title": "URI return values should not be strings",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The System.Uri class is a safe alternative and should be preferred.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3995",
        "messageFormat": "Change this return type to 'System.Uri'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3996",
        "title": "URI properties should not be strings",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The System.Uri class is a safe alternative and should be preferred.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3996",
        "messageFormat": "Change this property type to 'System.Uri'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3997",
        "title": "String URI overloads should call \"System.Uri\" overloads",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The System.Uri class is a safe alternative and should be preferred.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3997",
        "messageFormat": "Refactor this method so it invokes the overload accepting a 'System.Uri' parameter.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S3998",
        "title": "Threads should not lock on objects with weak identity",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "A thread acquiring a lock on an object that can be accessed across application domain boundaries runs the risk of being blocked by another thread in a different application domain. Objects that can be accessed across application domain boundaries are said to have weak identity. Types with weak identity are:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-3998",
        "messageFormat": "Replace this lock on '{0}' with a lock against an object that cannot be accessed across application domain boundaries.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4000",
        "title": "Pointers to unmanaged memory should not be visible",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "The IntPtr and UIntPtr types are used to access unmanaged memory, usually in order to use C or C++ libraries. If such a pointer is not secured by making it private, internal or readonly, it can lead to a vulnerability allowing access to arbitrary locations.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4000",
        "messageFormat": "Make '{0}' 'private' or 'protected readonly'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4002",
        "title": "Disposable types should declare finalizers",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "This rule raises an issue when a disposable type contains fields of the following types and does not implement a finalizer:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4002",
        "messageFormat": "Implement a finalizer that calls your 'Dispose' method.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4004",
        "title": "Collection properties should be readonly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "A writable collection property can be replaced by a completely different collection. Making it readonly prevents that while still allowing individual members to be set. If you want to allow the replacement of the whole collection the recommended pattern is to implement a method to remove all the elements (e.g. System.Collections.List<T>.Clear) and a method to populate the collection (e.g. System.Collections.List<T>.AddRange).",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4004",
        "messageFormat": "Make the '{0}' property read-only by removing the property setter or making it private.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4005",
        "title": "\"System.Uri\" arguments should be used instead of strings",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The System.Uri class is a safe alternative and should be preferred.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4005",
        "messageFormat": "Call the overload that takes a 'System.Uri' as an argument instead.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4015",
        "title": "Inherited member visibility should not be decreased",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "Changing an inherited member to private will not prevent access to the base class implementation.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4015",
        "messageFormat": "This member hides '{0}'. Make it non-private or seal the class.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4016",
        "title": "Enumeration members should not be named \"Reserved\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "If an enum member's name contains the word \"reserved\" it implies it is not currently used and will be change in the future. However changing an enum member is a breaking change and can create significant problems. There is no need to reserve an enum member since a new member can be added in the future, and such an addition will usually not be a breaking change.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4016",
        "messageFormat": "Remove or rename this enum member.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4017",
        "title": "Method signatures should not contain nested generic types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "A nested type is a type argument that is also a generic type. Calling a method with such a nested type argument requires complicated and confusing code. It should be avoided as much as possible.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4017",
        "messageFormat": "Refactor this method to remove the nested type argument.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4018",
        "title": "Generic methods should provide type parameters",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "The best way to determine the type of a generic method is by inference based on the type of argument that is passed to the method. This is not possible when a parameter type is missing from the argument list.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4018",
        "messageFormat": "Refactor this method to have parameters matching all the type parameters.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4019",
        "title": "Base class methods should not be hidden",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "When a method in a derived class has the same name as a method in the base class but with a signature that only differs by types that are weakly derived (e.g. object vs string), the result is that the base method becomes hidden.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4019",
        "messageFormat": "Remove or rename that method because it hides '{0}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4022",
        "title": "Enumerations should have \"Int32\" storage",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "By default the storage type of an enum is Int32. In most cases it is not necessary to change this. In particular you will not achieve any performance gain by using a smaller data type (e.g. Byte) and may limit future uses.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4022",
        "messageFormat": "Change this enum storage to 'Int32'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4023",
        "title": "Interfaces should not be empty",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Empty interfaces are usually used as a marker or a way to identify groups of types. The preferred way to achieve this is to use custom attributes.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4023",
        "messageFormat": "Remove this interface or add members to it.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S4025",
        "title": "Child class fields should not differ from parent class fields only by capitalization",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "Having a field in a child class with a name that differs from a parent class' field only by capitalization is sure to cause confusion. Such child class fields should be renamed.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4025",
        "messageFormat": "Rename this field; it may be confused with '{0}' in '{1}'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4026",
        "title": "Assemblies should be marked with \"NeutralResourcesLanguageAttribute\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "It is important to inform the ResourceManager of the language used to display the resources of the neutral culture for an assembly. This improves lookup performance for the first resource loaded. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4026",
        "messageFormat": "Mark this assembly with 'System.Resources.NeutralResourcesLanguageAttribute'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4027",
        "title": "Exceptions should provide standard constructors",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Exceptions types should provide the following constructors:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4027",
        "messageFormat": "Implement the missing constructors for this exception.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4035",
        "title": "Classes implementing \"IEquatable<T>\" should be sealed",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "When a class implements the IEquatable<T> interface, it enters a contract that, in effect, states \"I know how to compare two instances of type T or any type derived from T for equality.\". However if that class is derived, it is very unlikely that the base class will know how to make a meaningful comparison. Therefore that implicit contract is now broken.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4035",
        "messageFormat": "Seal class '{0}' or implement 'IEqualityComparer<T>' instead.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4039",
        "title": "Interface methods should be callable by derived types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Code Smell",
        "description": "When a base type explicitly implements a public interface method, that method is only accessible in derived types through a reference to the current instance (namely this). If the derived type explicitly overrides that interface method, the base implementation becomes inaccessible.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4039",
        "messageFormat": "Make '{0}' sealed, change to a non-explicit declaration or provide a new method exposing the functionality of '{1}'.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S4040",
        "title": "Strings should be normalized to uppercase",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Certain characters, once normalized to lowercase, cannot make a round trip. That is, they can not be converted from one locale to another and then accurately restored to their original characters.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4040",
        "messageFormat": "Change this normalization to 'ToUpperInvariant()'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4041",
        "title": "Type names should not match namespaces",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "When a type name matches the name of a publicly defined namespace, for instance one in the .NET framework class library, it leads to confusion and makes the library that much harder to use.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4041",
        "messageFormat": "Change the name of type '{0}' to be different from an existing framework namespace.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4047",
        "title": "Generics should be used when appropriate",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "When a reference parameter (keyword ref) is used, the passed argument type must exactly match the reference parameter type. This means that to be able to pass a derived type, it must be cast and assigned to a variable of the proper type. Use of generic methods eliminates that cumbersome down casting and should therefore be preferred.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4047",
        "messageFormat": "Make this method generic and replace the 'object' parameter with a type parameter.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4049",
        "title": "Properties should be preferred",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Properties are accessed like fields which makes them easier to use.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4049",
        "messageFormat": "Consider making method '{0}' a property.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S4050",
        "title": "Operators should be overloaded consistently",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "When implementing operator overloads, it is very important to make sure that all related operators and methods are consistent in their implementation.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4050",
        "messageFormat": "Provide an implementation for: {0}.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4052",
        "title": "Types should not extend outdated base types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "With the advent of .NET framework version 2, certain practices have become obsolete.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4052",
        "messageFormat": "Refactor this type not to derive from an outdated type '{0}'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4055",
        "title": "Literals should not be passed as localized parameters",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "String literals embedded in the source code will not be localized properly.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4055",
        "messageFormat": "Replace this string literal with a string retrieved through an instance of the 'ResourceManager' class.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S4056",
        "title": "Overloads with a \"CultureInfo\" or an \"IFormatProvider\" parameter should be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "When a System.Globalization.CultureInfo or IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4056",
        "messageFormat": "Use the overload that takes a 'CultureInfo' or 'IFormatProvider' parameter.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4057",
        "title": "Locales should be set for data types",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "When you create a DataTable or DataSet, you should set the locale explicitly. By default, the locale for these types is the current culture. For data that is stored in a database or file and is shared globally, the locale should ordinarily be set to the invariant culture (CultureInfo.InvariantCulture).",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4057",
        "messageFormat": "Set the locale for this '{0}'.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4058",
        "title": "Overloads with a \"StringComparison\" parameter should be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Many string operations, the Compare and Equals methods in particular, provide an overload that accepts a StringComparison enumeration value as a parameter. Calling these overloads and explicitly providing this parameter makes your code clearer and easier to maintain.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4058",
        "messageFormat": "Change this call to '{0}' to an overload that accepts a 'StringComparison' as a parameter.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4059",
        "title": "Property names should not match get methods",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "Properties and Get method should have names that makes them clearly distinguishable.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4059",
        "messageFormat": "Change either the name of property '{0}' or the name of method '{1}' to make them distinguishable.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4060",
        "title": "Non-abstract attributes should be sealed",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "The .NET framework class library provides methods for retrieving custom attributes. Sealing the attribute eliminates the search through the inheritance hierarchy, and can improve performance.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4060",
        "messageFormat": "Seal this attribute or make it abstract.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S4061",
        "title": "\"params\" should be used instead of \"varargs\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "A method using the VarArgs calling convention is not Common Language Specification (CLS) compliant and might not be accessible across programming languages, while the params keyword works the same way and is CLS compliant.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4061",
        "messageFormat": "Use the 'params' keyword instead of '__arglist'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4069",
        "title": "Operator overloads should have named alternatives",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Operator overloading is convenient but unfortunately not portable across languages. To be able to access the same functionality from another language you need to provide an alternate named method following the convention:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4069",
        "messageFormat": "Implement alternative method '{0}' for the operator '{1}'.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S4070",
        "title": "Non-flags enums should not be marked with \"FlagsAttribute\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "This rule raises an issue when an externally visible enumeration is marked with FlagsAttribute and one, or more, of its values is not a power of 2 or a combination of the other defined values.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4070",
        "messageFormat": "Remove the 'FlagsAttribute' from this enum.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4136",
        "title": "Method overloads should be grouped together",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "For clarity, all overloads of the same method should be grouped together. That lets both users and maintainers quickly understand all the current available options.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4136",
        "messageFormat": "All '{0}' method overloads should be adjacent.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4142",
        "title": "Duplicate values should not be passed as arguments",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "There are valid cases for passing a variable multiple times into the same method call, but usually doing so is a mistake, and something else was intended for one of the arguments.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4142",
        "messageFormat": "Verify that this is the intended value; it is the same as the {0} argument.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S4143",
        "title": "Collection elements should not be replaced unconditionally",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely errors.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4143",
        "messageFormat": "Verify this is the index/key that was intended; a value has already been set for it.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4144",
        "title": "Methods should not have identical implementations",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may be confusing to maintainers. In the latter case, one implementation should invoke the other.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4144",
        "messageFormat": "Update this method so that its implementation is not identical to '{0}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4158",
        "title": "Empty collections should not be accessed or iterated",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Bug",
        "description": "When a collection is empty it makes no sense to access or iterate it. Doing so anyway is surely an error; either population was accidentally omitted or the developer doesn't understand the situation.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4158",
        "messageFormat": "Remove this call, the collection is known to be empty here.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4159",
        "title": "Classes should implement their \"ExportAttribute\" interfaces",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Bug",
        "description": "In the Attributed Programming Model, the ExportAttribute declares that a part \"exports\", or provides to the composition container, an object that fulfills a particular contract. During composition, parts with imports that have matching contracts will have those dependencies filled by the exported object.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4159",
        "messageFormat": "{0} '{1}' on '{2}' or remove this export attribute.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4200",
        "title": "Native methods should be wrapped",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Native methods are functions that reside in libraries outside the virtual machine. Being able to call them is useful for interoperability with applications and libraries written in other programming languages, in particular when performing platform-specific operations. However doing so comes with extra risks since it means stepping out of the security model of the virtual machine. It is therefore highly recommended to take extra steps, like input validation, when invoking native methods. This is best done by making the native method private and by providing a wrapper that performs these extra steps and verifications.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4200",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S4201",
        "title": "Null checks should not be used with \"is\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "There's no need to null test in conjunction with an is test. null is not an instance of anything, so a null check is redundant.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4201",
        "messageFormat": "Remove this unnecessary null check; 'is' returns false for nulls.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4210",
        "title": "Windows Forms entry points should be marked with STAThread",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "When an assembly uses Windows Forms (classes and interfaces from the System.Windows.Forms namespace) its entry point should be marked with the STAThreadAttribute to indicate that the threading model should be \"Single-Threaded Apartment\" (STA) which is the only one supported by Windows Forms.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4210",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4211",
        "title": "Members should not have conflicting transparency annotations",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Vulnerability",
        "description": "Transparency attributes, SecurityCriticalAttribute and SecuritySafeCriticalAttribute are used to identify code that performs security-critical operations. The second one indicates that it is safe to call this code from transparent, while the first one does not. Since the transparency attributes of code elements with larger scope take precedence over transparency attributes of code elements that are contained in the first element a class, for instance, with a SecurityCriticalAttribute can not contain a method with a SecuritySafeCriticalAttribute.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4211",
        "messageFormat": "Change or remove this attribute to be consistent with its container.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S4212",
        "title": "Serialization constructors should be secured",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Vulnerability",
        "description": "Because serialization constructors allocate and initialize objects, security checks that are present on regular constructors must also be present on a serialization constructor. Failure to do so would allow callers that could not otherwise create an instance to use the serialization constructor to do this.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4212",
        "messageFormat": "Secure this serialization constructor.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S4214",
        "title": "\"P/Invoke\" methods should not be visible",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Methods marked with the System.Runtime.InteropServices.DllImportAttribute attribute use Platform Invocation Services to access unmanaged code and should not be exposed. Keeping them private or internal makes sure that their access is controlled and properly managed.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4214",
        "messageFormat": "Make this 'P/Invoke' method private or internal.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S4220",
        "title": "Events should have proper arguments",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "When raising an event, two arguments are expected by the EventHandler delegate: Sender and event-data. There are three guidelines regarding these parameters:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4220",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4225",
        "title": "Extension methods should not extend \"object\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "Creating an extension method that extends object is not recommended because it makes the method available on every type. Extensions should be applied at the most specialized level possible, and that is very unlikely to be object.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4225",
        "messageFormat": "Refactor this extension to extend a more concrete type.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4226",
        "title": "Extensions should be in separate namespaces",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "It makes little sense to create an extension method when it is possible to just add that method to the class itself.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4226",
        "messageFormat": "Either move this extension to another namespace or move the method inside the class itself.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4260",
        "title": "\"ConstructorArgument\" parameters should exist in constructors",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "When creating a custom Markup Extension that accepts parameters in WPF, the ConstructorArgument markup must be used to identify the discrete properties that match these parameters. However since this is done via a string, the compiler will not notice if there are typos.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4260",
        "messageFormat": "Change this 'ConstructorArgumentAttribute' value to match one of the existing constructors arguments.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4261",
        "title": "Methods should be named according to their synchronicities",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Minor Code Smell",
        "description": "According to the Task-based Asynchronous Pattern (TAP), methods returning either a System.Threading.Tasks.Task or a System.Threading.Tasks.Task<TResult> are considered \"asynchronous\". Such methods should use the Async suffix. Conversely methods which do not return such Tasks should not have an \"Async\" suffix in their names.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4261",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4275",
        "title": "Getters and setters should access the expected fields",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Bug",
        "description": "Properties provide a way to enforce encapsulation by providing public, protected or internal methods that give controlled access to private fields. However in classes with multiple fields it is not unusual that cut and paste is used to quickly create the needed properties, which can result in the wrong field being accessed by a getter or setter.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4275",
        "messageFormat": "Refactor this {0} so that it actually refers to the field '{1}'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4277",
        "title": "\"Shared\" parts should not be created with \"new\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Bug",
        "description": "Marking a class with PartCreationPolicy(CreationPolicy.Shared), which is part of Managed Extensibility Framework (MEF), means that a single, shared instance of the exported object will be created. Therefore it doesn't make sense to create new instances using the constructor and it will most likely result in unexpected behaviours.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4277",
        "messageFormat": "Refactor this code so that it doesn't invoke the constructor of this class.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S4423",
        "title": "Weak SSL/TLS protocols should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Vulnerability",
        "description": "Older versions of SSL/TLS protocol like \"SSLv3\" have been proven to be insecure.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4423",
        "messageFormat": "Change this code to use a stronger protocol.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S4426",
        "title": "Cryptographic keys should be robust",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Vulnerability",
        "description": "Most of cryptographic systems require a sufficient key size to be robust against brute-force attacks.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4426",
        "messageFormat": "Use a key length of at least {0} bits for {1} cipher algorithm.{2}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S4428",
        "title": "\"PartCreationPolicyAttribute\" should be used with \"ExportAttribute\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Bug",
        "description": "The PartCreationPolicyAttribute attribute, which is part of the Managed Extensibility Framework (MEF), is used to specify how the exported object will be created. Therefore it doesn't make sense not to export this a class with this attribute using the ExportAttribute attribute.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4428",
        "messageFormat": "Add the 'ExportAttribute' or remove 'PartCreationPolicyAttribute' to/from this class definition.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4432",
        "title": "AES encryption algorithm should be used with secured mode",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Critical Vulnerability",
        "description": "Encryption algorithms can be used with various modes. Some combinations are not secured:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4432",
        "messageFormat": "Use a certified third party library implementing Galois/Counter Mode (GCM) instead.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S4433",
        "title": "LDAP connections should be authenticated",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Vulnerability",
        "description": "An LDAP client authenticates to an LDAP server with a \"bind request\" which provides, among other, a simple authentication method.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4433",
        "messageFormat": "Set the 'AuthenticationType' property of this DirectoryEntry to 'AuthenticationTypes.Secure'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S4456",
        "title": "Parameter validation in yielding methods should be wrapped",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Because of the way yield methods are rewritten by the compiler (they become lazily evaluated state machines) any exceptions thrown during the parameters check will happen only when the collection is iterated over. That could happen far away from the source of the buggy code.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4456",
        "messageFormat": "Split this method into two, one handling parameters check and the other handling the iterator.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4457",
        "title": "Parameter validation in \"async\"/\"await\" methods should be wrapped",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "Because of the way async/await methods are rewritten by the compiler, any exceptions thrown during the parameters check will happen only when the task is observed. That could happen far away from the source of the buggy code or never happen for fire-and-forget tasks.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4457",
        "messageFormat": "Split this method into two, one handling parameters check and the other handling the asynchronous code.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4462",
        "title": "Calls to \"async\" methods should not be blocking",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Blocker Code Smell",
        "description": "Making blocking calls to async methods transforms something that was intended to be asynchronous into a synchronous block. Doing so can cause deadlocks and unexpected blocking of context threads.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4462",
        "messageFormat": "Replace this use of '{0}' with '{1}'.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S4487",
        "title": "Unread \"private\" fields should be removed",
        "defaultSeverity": "Info",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "Private fields only used to store values without reading them later is a case of dead store. So changing the value of such field is useless and most probably indicates a serious error in the code.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4487",
        "messageFormat": "Remove this unread {0} field '{1}' or refactor the code to use its value.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope",
          "Unnecessary"
        ]
      },
      {
        "id": "S4507",
        "title": "Delivering code in production with debug features activated is security-sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Security Hotspot",
        "description": "Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4507",
        "messageFormat": "Make sure this debug feature is deactivated before delivering the code in production.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S4524",
        "title": "\"default\" clauses should be first or last",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "switch can contain a default clause for various reasons: to handle unexpected values, to show that all the cases were properly considered.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4524",
        "messageFormat": "Move this 'default:' case to the beginning or end of this 'switch' statement.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4564",
        "title": "ASP.NET HTTP request validation feature should not be disabled",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Vulnerability",
        "description": "ASP.Net has a feature to validate HTTP requests to prevent potentially dangerous content to perform a cross-site scripting (XSS) attack. There is no reason to disable this mechanism even if other checks to prevent XXS attacks are in place.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4564",
        "messageFormat": "Enable input validation for this HttpPost method.",
        "customTags": [
          "C#",
          "MainSourceScope"
        ]
      },
      {
        "id": "S4581",
        "title": "\"new Guid()\" should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "When the syntax new Guid() (i.e. parameterless instantiation) is used, it must be that one of three things is wanted:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4581",
        "messageFormat": "Use 'Guid.NewGuid()' or 'Guid.Empty' or add arguments to this Guid instantiation.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4583",
        "title": "Calls to delegate's method \"BeginInvoke\" should be paired with calls to \"EndInvoke\"",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Bug",
        "description": "Calling the BeginInvoke method of a delegate will allocate some resources that are only freed-up when EndInvoke is called. This is why you should always pair BeginInvoke with an EndInvoke to complete your asynchronous call.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4583",
        "messageFormat": "Pair this \"BeginInvoke\" with an \"EndInvoke\".",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4586",
        "title": "Non-async \"Task/Task<T>\" methods should not return null",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Bug",
        "description": "Returning null from a non-async Task/Task<T> method will cause a NullReferenceException at runtime. This problem can be avoided by returning Task.FromResult<T>(null) instead.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4586",
        "messageFormat": "Do not return null from this method, instead return 'Task.FromResult<T>(null)', 'Task.CompletedTask' or 'Task.Delay(0)'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4635",
        "title": "String offset-based methods should be preferred for finding substrings from offsets",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "Looking for a given substring starting from a specified offset can be achieved by such code: str.Substring(startIndex).IndexOf(char1). This works well, but it creates a new string for each call to the Substring method. When this is done in a loop, a lot of strings are created for nothing, which can lead to performance problems if str is large.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4635",
        "messageFormat": "Replace '{0}' with the overload that accepts an offset parameter.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S4784",
        "title": "Using regular expressions is security-sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Security Hotspot",
        "description": "Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4784",
        "messageFormat": "Make sure that using a regular expression is safe here.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S4787",
        "title": "Encrypting data is security-sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Security Hotspot",
        "description": "Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4787",
        "messageFormat": "Make sure that encrypting data is safe here.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S4790",
        "title": "Using weak hashing algorithms is security-sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Security Hotspot",
        "description": "Cryptographic hash algorithms such as MD2, MD4, MD5, MD6, HAVAL-128, HMAC-MD5, DSA (which uses SHA-1), RIPEMD, RIPEMD-128, RIPEMD-160, HMACRIPEMD160 and SHA-1 are no longer considered secure, because it is too easy to create hash collisions with them (little computational effort is enough to find two or more different inputs that produces the same hash).",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4790",
        "messageFormat": "Make sure that hashing data is safe here.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S4792",
        "title": "Configuring loggers is security-sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Security Hotspot",
        "description": "Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4792",
        "messageFormat": "Make sure that this logger's configuration is safe.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S4818",
        "title": "Using Sockets is security-sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Security Hotspot",
        "description": "Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4818",
        "messageFormat": "Make sure that sockets are used safely here.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S4823",
        "title": "Using command line arguments is security-sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Security Hotspot",
        "description": "Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4823",
        "messageFormat": "Make sure that command line arguments are used safely here.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S4829",
        "title": "Reading the Standard Input is security-sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Security Hotspot",
        "description": "Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4829",
        "messageFormat": "Make sure that reading the standard input is safe here.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S4830",
        "title": "Server certificates should be verified during SSL/TLS connections",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Vulnerability",
        "description": "Validation of X.509 certificates is essential to create secure SSL/TLS sessions not vulnerable to man-in-the-middle attacks. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4830",
        "messageFormat": "Enable server certificate validation on this SSL/TLS connection",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S4834",
        "title": "Controlling permissions is security-sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Security Hotspot",
        "description": "The access control of an application must be properly implemented in order to restrict access to resources to authorized entities otherwise this could lead to vulnerabilities:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-4834",
        "messageFormat": "Make sure that permissions are controlled safely here.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S5034",
        "title": "\"ValueTask\" should be consumed correctly",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "ValueTask<TResult> was introduced in .NET Core 2.0 to optimize memory allocation when functions return their results synchronously.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-5034",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S5042",
        "title": "Expanding archive files without controlling resource consumption is security sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Security Hotspot",
        "description": "Successful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can lead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of uncompressed data. To achieve this extreme compression ratio, attackers will compress irrelevant data (eg: a long string of repeated bytes). ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-5042",
        "messageFormat": "Make sure that decompressing this archive file is safe.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S5332",
        "title": "Using clear-text protocols is security-sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Security Hotspot",
        "description": "Clear-text protocols as ftp, telnet or non secure http are lacking encryption of transported data. They are also missing the capability to build an authenticated connection. This mean that any attacker who can sniff traffic from the network can read, modify or corrupt the transported content. These protocol are not secure as they expose applications to a large range of risk:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-5332",
        "messageFormat": "Using {0} protocol is insecure. Use {1} instead.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S5332",
        "title": "Using clear-text protocols is security-sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Security Hotspot",
        "description": "Clear-text protocols as ftp, telnet or non secure http are lacking encryption of transported data. They are also missing the capability to build an authenticated connection. This mean that any attacker who can sniff traffic from the network can read, modify or corrupt the transported content. These protocol are not secure as they expose applications to a large range of risk:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-5332",
        "messageFormat": "EnableSsl should be set to true.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S5542",
        "title": "Encryption algorithms should be used with secure mode and padding scheme",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Blocker Vulnerability",
        "description": "To perform secure cryptography, operation modes and padding scheme are essentials and should be used correctly according to the encryption algorithm:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-5542",
        "messageFormat": "Use secure mode and padding scheme.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S5547",
        "title": "Cipher algorithms should be robust",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Vulnerability",
        "description": "Strong cipher algorithms are cryptographic systems resistant to cryptanalysis, they are not vulnerable to well-known attacks like brute force attacks for example.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-5547",
        "messageFormat": "Use a strong cipher algorithm.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S5659",
        "title": "JWT should be signed and verified with strong cipher algorithms",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Vulnerability",
        "description": "If a JSON Web Token (JWT) is not signed with a strong cipher algorithm (or not signed at all) an attacker can forge it and impersonate user identities.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-5659",
        "messageFormat": "Use only strong cipher algorithms when verifying the signature of this JWT.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S5766",
        "title": "Deserializing objects without performing data validation is security-sensitive",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Security Hotspot",
        "description": "Deserialization process extracts data from the serialized representation of an object and reconstruct it directly, without calling constructors. Thus, data validation implemented in constructors can be bypassed if serialized objects are controlled by an attacker.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-5766",
        "messageFormat": "Make sure not performing data validation after deserialization is safe here.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S5773",
        "title": "Types allowed to be deserialized should be restricted",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Vulnerability",
        "description": "Failure to control types during deserialization can lead to runtime errors and vulnerabilities. There are many types, called \"gadgets\" (see ysoserial.net) which are known to be not secure when deserializing. ",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-5773",
        "messageFormat": "{0}",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope"
        ]
      },
      {
        "id": "S818",
        "title": "Literal suffixes should be upper case",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Minor Code Smell",
        "description": "Using upper case literal suffixes removes the potential ambiguity between \"1\" (digit 1) and \"l\" (letter el) for declaring literals.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-818",
        "messageFormat": "Upper case this literal suffix.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S881",
        "title": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": false,
        "category": "Major Code Smell",
        "description": "The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-881",
        "messageFormat": "Extract this {0} operation into a dedicated statement.",
        "customTags": [
          "C#",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S907",
        "title": "\"goto\" statement should not be used",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Major Code Smell",
        "description": "goto is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such as if, for, while, continue or break should be used instead.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-907",
        "messageFormat": "Remove this use of 'goto'.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S927",
        "title": "Parameter names should match base declaration and other partial definitions",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "Critical Code Smell",
        "description": "The name of a parameter in an externally visible method override does not match the name of the parameter in the base declaration of the method, or the name of the parameter in the interface declaration of the method or the name of any other partial definition.",
        "helpLinkUri": "https://rules.sonarsource.com/csharp/RSPEC-927",
        "messageFormat": "Rename parameter '{0}' to '{1}' to match the {2} declaration.",
        "customTags": [
          "C#",
          "SonarWay",
          "MainSourceScope",
          "TestSourceScope"
        ]
      },
      {
        "id": "S9999-cpd",
        "title": "Copy-paste token calculator",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "",
        "description": "",
        "helpLinkUri": "",
        "messageFormat": "",
        "customTags": [
          "MainSourceScope",
          "TestSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S9999-metadata",
        "title": "File metadata generator",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "",
        "description": "",
        "helpLinkUri": "",
        "messageFormat": "",
        "customTags": [
          "MainSourceScope",
          "TestSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S9999-metrics",
        "title": "Metrics calculator",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "",
        "description": "",
        "helpLinkUri": "",
        "messageFormat": "",
        "customTags": [
          "MainSourceScope",
          "TestSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S9999-symbolRef",
        "title": "Symbol reference calculator",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "",
        "description": "",
        "helpLinkUri": "",
        "messageFormat": "",
        "customTags": [
          "MainSourceScope",
          "TestSourceScope",
          "NotConfigurable"
        ]
      },
      {
        "id": "S9999-token-type",
        "title": "Token type calculator",
        "defaultSeverity": "Warning",
        "isEnabledByDefault": true,
        "category": "",
        "description": "",
        "helpLinkUri": "",
        "messageFormat": "",
        "customTags": [
          "MainSourceScope",
          "TestSourceScope",
          "NotConfigurable"
        ]
      }
    ]
  }
]